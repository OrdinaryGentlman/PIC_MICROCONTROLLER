

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Sep 09 13:34:35 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23   000000                     
    24                           ; Generated 23/03/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58   000000                     _LATD	set	3980
    59   000000                     _PORTBbits	set	3969
    60   000000                     _LATBbits	set	3978
    61   000000                     _LATDbits	set	3980
    62   000000                     _TRISBbits	set	3987
    63   000000                     _TRISD	set	3989
    64                           
    65                           	psect	smallconst
    66   000800                     __psmallconst:
    67                           	callstack 0
    68   000800  00                 	db	0
    69   000801                     STR_1:
    70   000801  54                 	db	84	;'T'
    71   000802  58                 	db	88	;'X'
    72   000803  3A                 	db	58	;':'
    73   000804  20                 	db	32
    74   000805  00                 	db	0
    75   000806  00                 	db	0	; dummy byte at the end
    76   000000                     
    77                           ; #config settings
    78                           
    79                           	psect	cinit
    80   000B4A                     __pcinit:
    81                           	callstack 0
    82   000B4A                     start_initialization:
    83                           	callstack 0
    84   000B4A                     __initialization:
    85                           	callstack 0
    86   000B4A                     end_of_initialization:
    87                           	callstack 0
    88   000B4A                     __end_of__initialization:
    89                           	callstack 0
    90   000B4A  0E00               	movlw	low (__Lsmallconst shr (0+16))
    91   000B4C  6EF8               	movwf	tblptru,c
    92   000B4E  0E08               	movlw	high __Lsmallconst
    93   000B50  6EF7               	movwf	tblptrh,c
    94   000B52  0100               	movlb	0
    95   000B54  EF4D  F005         	goto	_main	;jump to C main() function
    96                           
    97                           	psect	cstackCOMRAM
    98   000001                     __pcstackCOMRAM:
    99                           	callstack 0
   100   000001                     ??_uart_write:
   101   000001                     ??_uart_read:
   102   000001                     lcd_set_bit@data_bit:
   103                           	callstack 0
   104                           
   105                           ; 1 bytes @ 0x0
   106   000001                     	ds	1
   107   000002                     ??_lcd_cmd:
   108   000002                     lcd_char@Lower_Nibble:
   109                           	callstack 0
   110                           
   111                           ; 1 bytes @ 0x1
   112   000002                     	ds	1
   113   000003                     lcd_cmd@a:
   114                           	callstack 0
   115   000003                     lcd_char@Upper_Nibble:
   116                           	callstack 0
   117   000003                     uart_write@data:
   118                           	callstack 0
   119   000003                     uart_read@data:
   120                           	callstack 0
   121                           
   122                           ; 1 bytes @ 0x2
   123   000003                     	ds	1
   124   000004                     ??_lcd_init:
   125   000004                     lcd_set_cursor@b:
   126                           	callstack 0
   127   000004                     uart_write@i:
   128                           	callstack 0
   129   000004                     uart_read@i:
   130                           	callstack 0
   131   000004                     lcd_char@i:
   132                           	callstack 0
   133                           
   134                           ; 2 bytes @ 0x3
   135   000004                     	ds	1
   136   000005                     lcd_set_cursor@a:
   137                           	callstack 0
   138                           
   139                           ; 1 bytes @ 0x4
   140   000005                     	ds	1
   141   000006                     lcd_set_cursor@z:
   142                           	callstack 0
   143   000006                     lcd_char@i_229:
   144                           	callstack 0
   145                           
   146                           ; 2 bytes @ 0x5
   147   000006                     	ds	1
   148   000007                     lcd_set_cursor@y:
   149                           	callstack 0
   150                           
   151                           ; 1 bytes @ 0x6
   152   000007                     	ds	1
   153   000008                     lcd_set_cursor@temp:
   154                           	callstack 0
   155   000008                     lcd_char@data:
   156                           	callstack 0
   157                           
   158                           ; 1 bytes @ 0x7
   159   000008                     	ds	1
   160   000009                     lcd_string@a:
   161                           	callstack 0
   162   000009                     test@s:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0x8
   166   000009                     	ds	1
   167   00000A                     ??_lcd_string:
   168                           
   169                           ; 1 bytes @ 0x9
   170   00000A                     	ds	1
   171   00000B                     lcd_string@i:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0xA
   175   00000B                     	ds	2
   176   00000D                     ??_main:
   177                           
   178                           ; 1 bytes @ 0xC
   179   00000D                     	ds	1
   180   00000E                     main@x:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0xD
   184   00000E                     	ds	1
   185                           
   186 ;;
   187 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   188 ;;
   189 ;; *************** function _main *****************
   190 ;; Defined at:
   191 ;;		line 13 in file "tx_main.c"
   192 ;; Parameters:    Size  Location     Type
   193 ;;		None
   194 ;; Auto vars:     Size  Location     Type
   195 ;;  x               1   13[COMRAM] unsigned char 
   196 ;; Return value:  Size  Location     Type
   197 ;;                  1    wreg      void 
   198 ;; Registers used:
   199 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   200 ;; Tracked objects:
   201 ;;		On entry : 0/0
   202 ;;		On exit  : 0/0
   203 ;;		Unchanged: 0/0
   204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   205 ;;      Params:         0       0       0       0       0       0       0       0       0
   206 ;;      Locals:         1       0       0       0       0       0       0       0       0
   207 ;;      Temps:          1       0       0       0       0       0       0       0       0
   208 ;;      Totals:         2       0       0       0       0       0       0       0       0
   209 ;;Total ram usage:        2 bytes
   210 ;; Hardware stack levels required when called: 3
   211 ;; This function calls:
   212 ;;		_lcd_clear
   213 ;;		_lcd_init
   214 ;;		_lcd_set_cursor
   215 ;;		_lcd_string
   216 ;;		_test
   217 ;;		_uart_init
   218 ;;		_uart_read
   219 ;;		_uart_write
   220 ;; This function is called by:
   221 ;;		Startup code after reset
   222 ;; This function uses a non-reentrant model
   223 ;;
   224                           
   225                           	psect	text0
   226   000A9A                     __ptext0:
   227                           	callstack 0
   228   000A9A                     _main:
   229                           	callstack 28
   230   000A9A                     
   231                           ;tx_main.c: 14:     TRISD = 0;
   232   000A9A  0E00               	movlw	0
   233   000A9C  6E95               	movwf	149,c	;volatile
   234                           
   235                           ;tx_main.c: 15:     LATD = 0;
   236   000A9E  0E00               	movlw	0
   237   000AA0  6E8C               	movwf	140,c	;volatile
   238   000AA2                     
   239                           ;tx_main.c: 17:     lcd_init();
   240   000AA2  ECEE  F004         	call	_lcd_init	;wreg free
   241   000AA6                     
   242                           ;tx_main.c: 18:     lcd_set_cursor(1,1);
   243   000AA6  0E01               	movlw	1
   244   000AA8  6E04               	movwf	lcd_set_cursor@b^0,c
   245   000AAA  0E01               	movlw	1
   246   000AAC  ECBB  F004         	call	_lcd_set_cursor
   247   000AB0                     
   248                           ;tx_main.c: 19:     lcd_clear();
   249   000AB0  ECAC  F005         	call	_lcd_clear	;wreg free
   250   000AB4                     
   251                           ;tx_main.c: 20:     lcd_string("TX: ");
   252   000AB4  0E01               	movlw	low STR_1
   253   000AB6  6E09               	movwf	lcd_string@a^0,c
   254   000AB8  EC74  F005         	call	_lcd_string	;wreg free
   255   000ABC                     
   256                           ;tx_main.c: 22:     uart_init();
   257   000ABC  ECB8  F005         	call	_uart_init	;wreg free
   258   000AC0                     l983:
   259                           
   260                           ;tx_main.c: 25:         uart_write('a');
   261   000AC0  0E61               	movlw	97
   262   000AC2  EC81  F004         	call	_uart_write
   263   000AC6                     
   264                           ;tx_main.c: 26:         unsigned char x = uart_read();
   265   000AC6  EC04  F004         	call	_uart_read	;wreg free
   266   000ACA  6E0E               	movwf	main@x^0,c
   267   000ACC                     
   268                           ;tx_main.c: 27:         test(x);
   269   000ACC  500E               	movf	main@x^0,w,c
   270   000ACE  ECB3  F005         	call	_test
   271   000AD2                     
   272                           ;tx_main.c: 29:         _delay((unsigned long)((1)*(8000000/4000.0)));
   273   000AD2  0E03               	movlw	3
   274   000AD4  6E0D               	movwf	??_main^0,c
   275   000AD6  0E98               	movlw	152
   276   000AD8                     u197:
   277   000AD8  2EE8               	decfsz	wreg,f,c
   278   000ADA  D7FE               	bra	u197
   279   000ADC  2E0D               	decfsz	??_main^0,f,c
   280   000ADE  D7FC               	bra	u197
   281   000AE0  EF60  F005         	goto	l983
   282   000AE4  EF00  F000         	goto	start
   283   000AE8                     __end_of_main:
   284                           	callstack 0
   285                           
   286 ;; *************** function _uart_write *****************
   287 ;; Defined at:
   288 ;;		line 32 in file "./soft_uart.h"
   289 ;; Parameters:    Size  Location     Type
   290 ;;  data            1    wreg     unsigned char 
   291 ;; Auto vars:     Size  Location     Type
   292 ;;  data            1    2[COMRAM] unsigned char 
   293 ;;  i               1    3[COMRAM] unsigned char 
   294 ;; Return value:  Size  Location     Type
   295 ;;                  1    wreg      void 
   296 ;; Registers used:
   297 ;;		wreg, status,2, status,0
   298 ;; Tracked objects:
   299 ;;		On entry : 0/0
   300 ;;		On exit  : 0/0
   301 ;;		Unchanged: 0/0
   302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   303 ;;      Params:         0       0       0       0       0       0       0       0       0
   304 ;;      Locals:         2       0       0       0       0       0       0       0       0
   305 ;;      Temps:          2       0       0       0       0       0       0       0       0
   306 ;;      Totals:         4       0       0       0       0       0       0       0       0
   307 ;;Total ram usage:        4 bytes
   308 ;; Hardware stack levels used: 1
   309 ;; This function calls:
   310 ;;		Nothing
   311 ;; This function is called by:
   312 ;;		_main
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text1
   317   000902                     __ptext1:
   318                           	callstack 0
   319   000902                     _uart_write:
   320                           	callstack 30
   321                           
   322                           ;incstack = 0
   323                           ;uart_write@data stored from wreg
   324   000902  6E03               	movwf	uart_write@data^0,c
   325   000904                     
   326                           ;./soft_uart.h: 33:     unsigned char i;;./soft_uart.h: 36:     LATBbits.LATB0 = 0;
   327   000904  908A               	bcf	138,0,c	;volatile
   328   000906                     
   329                           ;./soft_uart.h: 37:     _delay((unsigned long)(((10000000 / 9600))*(8000000/4000000.0)))
      +                          ;
   330   000906  0E03               	movlw	3
   331   000908  6E01               	movwf	??_uart_write^0,c
   332   00090A  0EB3               	movlw	179
   333   00090C                     u207:
   334   00090C  2EE8               	decfsz	wreg,f,c
   335   00090E  D7FE               	bra	u207
   336   000910  2E01               	decfsz	??_uart_write^0,f,c
   337   000912  D7FC               	bra	u207
   338   000914  0000               	nop	
   339   000916                     
   340                           ;./soft_uart.h: 40:     for (i = 0; i < 8; i++) {
   341   000916  0E00               	movlw	0
   342   000918  6E04               	movwf	uart_write@i^0,c
   343   00091A                     l893:
   344                           
   345                           ;./soft_uart.h: 41:         LATBbits.LATB0 = (data >> i) & 0x01;
   346   00091A  C004  F001         	movff	uart_write@i,??_uart_write
   347   00091E  C003  F002         	movff	uart_write@data,??_uart_write+1
   348   000922  2A01               	incf	??_uart_write^0,f,c
   349   000924  EF96  F004         	goto	u104
   350   000928                     u105:
   351   000928  90D8               	bcf	status,0,c
   352   00092A  3202               	rrcf	(??_uart_write+1)^0,f,c
   353   00092C                     u104:
   354   00092C  2E01               	decfsz	??_uart_write^0,f,c
   355   00092E  EF94  F004         	goto	u105
   356   000932  0E01               	movlw	1
   357   000934  1602               	andwf	(??_uart_write+1)^0,f,c
   358   000936  508A               	movf	138,w,c	;volatile
   359   000938  1802               	xorwf	(??_uart_write+1)^0,w,c
   360   00093A  0BFE               	andlw	-2
   361   00093C  1802               	xorwf	(??_uart_write+1)^0,w,c
   362   00093E  6E8A               	movwf	138,c	;volatile
   363   000940                     
   364                           ;./soft_uart.h: 42:         _delay((unsigned long)(((10000000 / 9600))*(8000000/4000000.
      +                          0)));
   365   000940  0E03               	movlw	3
   366   000942  6E01               	movwf	??_uart_write^0,c
   367   000944  0EB3               	movlw	179
   368   000946                     u217:
   369   000946  2EE8               	decfsz	wreg,f,c
   370   000948  D7FE               	bra	u217
   371   00094A  2E01               	decfsz	??_uart_write^0,f,c
   372   00094C  D7FC               	bra	u217
   373   00094E  0000               	nop	
   374                           
   375                           ;./soft_uart.h: 43:     }
   376   000950  2A04               	incf	uart_write@i^0,f,c
   377   000952  0E07               	movlw	7
   378   000954  6404               	cpfsgt	uart_write@i^0,c
   379   000956  EFAF  F004         	goto	u111
   380   00095A  EFB1  F004         	goto	u110
   381   00095E                     u111:
   382   00095E  EF8D  F004         	goto	l893
   383   000962                     u110:
   384   000962                     
   385                           ;./soft_uart.h: 46:     LATBbits.LATB0 = 1;
   386   000962  808A               	bsf	138,0,c	;volatile
   387   000964                     
   388                           ;./soft_uart.h: 47:     _delay((unsigned long)(((10000000 / 9600))*(8000000/4000000.0)))
      +                          ;
   389   000964  0E03               	movlw	3
   390   000966  6E01               	movwf	??_uart_write^0,c
   391   000968  0EB3               	movlw	179
   392   00096A                     u227:
   393   00096A  2EE8               	decfsz	wreg,f,c
   394   00096C  D7FE               	bra	u227
   395   00096E  2E01               	decfsz	??_uart_write^0,f,c
   396   000970  D7FC               	bra	u227
   397   000972  0000               	nop	
   398   000974  0012               	return		;funcret
   399   000976                     __end_of_uart_write:
   400                           	callstack 0
   401                           
   402 ;; *************** function _uart_read *****************
   403 ;; Defined at:
   404 ;;		line 51 in file "./soft_uart.h"
   405 ;; Parameters:    Size  Location     Type
   406 ;;		None
   407 ;; Auto vars:     Size  Location     Type
   408 ;;  i               1    3[COMRAM] unsigned char 
   409 ;;  data            1    2[COMRAM] unsigned char 
   410 ;; Return value:  Size  Location     Type
   411 ;;                  1    wreg      unsigned char 
   412 ;; Registers used:
   413 ;;		wreg, status,2, status,0
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   419 ;;      Params:         0       0       0       0       0       0       0       0       0
   420 ;;      Locals:         2       0       0       0       0       0       0       0       0
   421 ;;      Temps:          2       0       0       0       0       0       0       0       0
   422 ;;      Totals:         4       0       0       0       0       0       0       0       0
   423 ;;Total ram usage:        4 bytes
   424 ;; Hardware stack levels used: 1
   425 ;; This function calls:
   426 ;;		Nothing
   427 ;; This function is called by:
   428 ;;		_main
   429 ;; This function uses a non-reentrant model
   430 ;;
   431                           
   432                           	psect	text2
   433   000808                     __ptext2:
   434                           	callstack 0
   435   000808                     _uart_read:
   436                           	callstack 30
   437   000808                     
   438                           ;./soft_uart.h: 52:     unsigned char data = 0;
   439   000808  0E00               	movlw	0
   440   00080A  6E03               	movwf	uart_read@data^0,c
   441   00080C                     l71:
   442   00080C  B281               	btfsc	129,1,c	;volatile
   443   00080E  EF0B  F004         	goto	u121
   444   000812  EF0D  F004         	goto	u120
   445   000816                     u121:
   446   000816  EF06  F004         	goto	l71
   447   00081A                     u120:
   448   00081A                     
   449                           ;./soft_uart.h: 58:     _delay((unsigned long)(((10000000 / 9600) / 2)*(8000000/4000000.
      +                          0)));
   450   00081A  0ED0               	movlw	208
   451   00081C                     u237:
   452   00081C  D000               	nop2	
   453   00081E  2EE8               	decfsz	wreg,f,c
   454   000820  D7FD               	bra	u237
   455   000822                     
   456                           ;./soft_uart.h: 61:     for (i = 0; i < 8; i++) {
   457   000822  0E00               	movlw	0
   458   000824  6E04               	movwf	uart_read@i^0,c
   459   000826                     l911:
   460                           
   461                           ;./soft_uart.h: 62:         _delay((unsigned long)(((10000000 / 9600))*(8000000/4000000.
      +                          0)));
   462   000826  0E03               	movlw	3
   463   000828  6E01               	movwf	??_uart_read^0,c
   464   00082A  0EB3               	movlw	179
   465   00082C                     u247:
   466   00082C  2EE8               	decfsz	wreg,f,c
   467   00082E  D7FE               	bra	u247
   468   000830  2E01               	decfsz	??_uart_read^0,f,c
   469   000832  D7FC               	bra	u247
   470   000834  0000               	nop	
   471   000836                     
   472                           ;./soft_uart.h: 63:         if (PORTBbits.RB1) {
   473   000836  A281               	btfss	129,1,c	;volatile
   474   000838  EF20  F004         	goto	u131
   475   00083C  EF22  F004         	goto	u130
   476   000840                     u131:
   477   000840  EF30  F004         	goto	l917
   478   000844                     u130:
   479   000844                     
   480                           ;./soft_uart.h: 64:             data |= (1 << i);
   481   000844  C004  F001         	movff	uart_read@i,??_uart_read
   482   000848  0E01               	movlw	1
   483   00084A  6E02               	movwf	(??_uart_read+1)^0,c
   484   00084C  2A01               	incf	??_uart_read^0,f,c
   485   00084E  EF2B  F004         	goto	u144
   486   000852                     u145:
   487   000852  90D8               	bcf	status,0,c
   488   000854  3602               	rlcf	(??_uart_read+1)^0,f,c
   489   000856                     u144:
   490   000856  2E01               	decfsz	??_uart_read^0,f,c
   491   000858  EF29  F004         	goto	u145
   492   00085C  5002               	movf	(??_uart_read+1)^0,w,c
   493   00085E  1203               	iorwf	uart_read@data^0,f,c
   494   000860                     l917:
   495                           
   496                           ;./soft_uart.h: 66:     }
   497   000860  2A04               	incf	uart_read@i^0,f,c
   498   000862  0E07               	movlw	7
   499   000864  6404               	cpfsgt	uart_read@i^0,c
   500   000866  EF37  F004         	goto	u151
   501   00086A  EF39  F004         	goto	u150
   502   00086E                     u151:
   503   00086E  EF13  F004         	goto	l911
   504   000872                     u150:
   505   000872                     
   506                           ;./soft_uart.h: 69:     _delay((unsigned long)(((10000000 / 9600))*(8000000/4000000.0)))
      +                          ;
   507   000872  0E03               	movlw	3
   508   000874  6E01               	movwf	??_uart_read^0,c
   509   000876  0EB3               	movlw	179
   510   000878                     u257:
   511   000878  2EE8               	decfsz	wreg,f,c
   512   00087A  D7FE               	bra	u257
   513   00087C  2E01               	decfsz	??_uart_read^0,f,c
   514   00087E  D7FC               	bra	u257
   515   000880  0000               	nop	
   516   000882                     
   517                           ;./soft_uart.h: 71:     return data;
   518   000882  5003               	movf	uart_read@data^0,w,c
   519   000884  0012               	return		;funcret
   520   000886                     __end_of_uart_read:
   521                           	callstack 0
   522                           
   523 ;; *************** function _uart_init *****************
   524 ;; Defined at:
   525 ;;		line 25 in file "./soft_uart.h"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		None
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   539 ;;      Params:         0       0       0       0       0       0       0       0       0
   540 ;;      Locals:         0       0       0       0       0       0       0       0       0
   541 ;;      Temps:          0       0       0       0       0       0       0       0       0
   542 ;;      Totals:         0       0       0       0       0       0       0       0       0
   543 ;;Total ram usage:        0 bytes
   544 ;; Hardware stack levels used: 1
   545 ;; This function calls:
   546 ;;		Nothing
   547 ;; This function is called by:
   548 ;;		_main
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           	psect	text3
   553   000B70                     __ptext3:
   554                           	callstack 0
   555   000B70                     _uart_init:
   556                           	callstack 30
   557   000B70                     
   558                           ;./soft_uart.h: 26:     TRISBbits.TRISB0 = 0;
   559   000B70  9093               	bcf	147,0,c	;volatile
   560                           
   561                           ;./soft_uart.h: 27:     LATBbits.LATB0 = 1;
   562   000B72  808A               	bsf	138,0,c	;volatile
   563                           
   564                           ;./soft_uart.h: 28:     TRISBbits.TRISB1 = 1;
   565   000B74  8293               	bsf	147,1,c	;volatile
   566   000B76  0012               	return		;funcret
   567   000B78                     __end_of_uart_init:
   568                           	callstack 0
   569                           
   570 ;; *************** function _test *****************
   571 ;; Defined at:
   572 ;;		line 116 in file "./lcd.h"
   573 ;; Parameters:    Size  Location     Type
   574 ;;  s               1    wreg     unsigned char 
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  s               1    8[COMRAM] unsigned char 
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, status,2, status,0, cstack
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   586 ;;      Params:         0       0       0       0       0       0       0       0       0
   587 ;;      Locals:         1       0       0       0       0       0       0       0       0
   588 ;;      Temps:          0       0       0       0       0       0       0       0       0
   589 ;;      Totals:         1       0       0       0       0       0       0       0       0
   590 ;;Total ram usage:        1 bytes
   591 ;; Hardware stack levels used: 1
   592 ;; Hardware stack levels required when called: 2
   593 ;; This function calls:
   594 ;;		_lcd_char
   595 ;; This function is called by:
   596 ;;		_main
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           	psect	text4
   601   000B66                     __ptext4:
   602                           	callstack 0
   603   000B66                     _test:
   604                           	callstack 28
   605                           
   606                           ;incstack = 0
   607                           ;test@s stored from wreg
   608   000B66  6E09               	movwf	test@s^0,c
   609   000B68                     
   610                           ;./lcd.h: 119:     lcd_char(s);
   611   000B68  5009               	movf	test@s^0,w,c
   612   000B6A  EC43  F004         	call	_lcd_char
   613   000B6E  0012               	return		;funcret
   614   000B70                     __end_of_test:
   615                           	callstack 0
   616                           
   617 ;; *************** function _lcd_string *****************
   618 ;; Defined at:
   619 ;;		line 109 in file "./lcd.h"
   620 ;; Parameters:    Size  Location     Type
   621 ;;  a               1    8[COMRAM] PTR unsigned char 
   622 ;;		 -> STR_1(5), 
   623 ;; Auto vars:     Size  Location     Type
   624 ;;  i               2   10[COMRAM] int 
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   634 ;;      Params:         1       0       0       0       0       0       0       0       0
   635 ;;      Locals:         2       0       0       0       0       0       0       0       0
   636 ;;      Temps:          1       0       0       0       0       0       0       0       0
   637 ;;      Totals:         4       0       0       0       0       0       0       0       0
   638 ;;Total ram usage:        4 bytes
   639 ;; Hardware stack levels used: 1
   640 ;; Hardware stack levels required when called: 2
   641 ;; This function calls:
   642 ;;		_lcd_char
   643 ;; This function is called by:
   644 ;;		_main
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text5
   649   000AE8                     __ptext5:
   650                           	callstack 0
   651   000AE8                     _lcd_string:
   652                           	callstack 28
   653   000AE8                     
   654                           ;./lcd.h: 109: void lcd_string(char *a);./lcd.h: 110: {;./lcd.h: 111:     int i;;./lcd.h
      +                          : 112:     for(i=0;a[i]!='\0';i++)
   655   000AE8  0E00               	movlw	0
   656   000AEA  6E0C               	movwf	(lcd_string@i+1)^0,c
   657   000AEC  0E00               	movlw	0
   658   000AEE  6E0B               	movwf	lcd_string@i^0,c
   659   000AF0  EF85  F005         	goto	l969
   660   000AF4                     l965:
   661                           
   662                           ;./lcd.h: 113:        lcd_char(a[i]);
   663   000AF4  5009               	movf	lcd_string@a^0,w,c
   664   000AF6  240B               	addwf	lcd_string@i^0,w,c
   665   000AF8  6E0A               	movwf	??_lcd_string^0,c
   666   000AFA  C00A  FFF6         	movff	??_lcd_string,tblptrl
   667   000AFE                     	if	0	;There is only one active tblptr byte
   668   000AFE                     	endif
   669   000AFE                     	if	0	;tblptru may be non-zero
   670   000AFE                     	endif
   671   000AFE                     	if	0	;tblptru may be non-zero
   672   000AFE                     	endif
   673   000AFE  0008               	tblrd		*
   674   000B00  50F5               	movf	tablat,w,c
   675   000B02  EC43  F004         	call	_lcd_char
   676   000B06  4A0B               	infsnz	lcd_string@i^0,f,c
   677   000B08  2A0C               	incf	(lcd_string@i+1)^0,f,c
   678   000B0A                     l969:
   679   000B0A  5009               	movf	lcd_string@a^0,w,c
   680   000B0C  240B               	addwf	lcd_string@i^0,w,c
   681   000B0E  6E0A               	movwf	??_lcd_string^0,c
   682   000B10  C00A  FFF6         	movff	??_lcd_string,tblptrl
   683   000B14                     	if	0	;There is only one active tblptr byte
   684   000B14                     	endif
   685   000B14                     	if	0	;tblptru may be non-zero
   686   000B14                     	endif
   687   000B14                     	if	0	;tblptru may be non-zero
   688   000B14                     	endif
   689   000B14  0008               	tblrd		*
   690   000B16  50F5               	movf	tablat,w,c
   691   000B18  0900               	iorlw	0
   692   000B1A  A4D8               	btfss	status,2,c
   693   000B1C  EF92  F005         	goto	u181
   694   000B20  EF94  F005         	goto	u180
   695   000B24                     u181:
   696   000B24  EF7A  F005         	goto	l965
   697   000B28                     u180:
   698   000B28  0012               	return		;funcret
   699   000B2A                     __end_of_lcd_string:
   700                           	callstack 0
   701                           
   702 ;; *************** function _lcd_char *****************
   703 ;; Defined at:
   704 ;;		line 93 in file "./lcd.h"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  data            1    wreg     unsigned char 
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  data            1    7[COMRAM] unsigned char 
   709 ;;  i               2    5[COMRAM] int 
   710 ;;  i               2    3[COMRAM] int 
   711 ;;  Upper_Nibble    1    2[COMRAM] unsigned char 
   712 ;;  Lower_Nibble    1    1[COMRAM] unsigned char 
   713 ;; Return value:  Size  Location     Type
   714 ;;                  1    wreg      void 
   715 ;; Registers used:
   716 ;;		wreg, status,2, status,0, cstack
   717 ;; Tracked objects:
   718 ;;		On entry : 0/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   722 ;;      Params:         0       0       0       0       0       0       0       0       0
   723 ;;      Locals:         7       0       0       0       0       0       0       0       0
   724 ;;      Temps:          0       0       0       0       0       0       0       0       0
   725 ;;      Totals:         7       0       0       0       0       0       0       0       0
   726 ;;Total ram usage:        7 bytes
   727 ;; Hardware stack levels used: 1
   728 ;; Hardware stack levels required when called: 1
   729 ;; This function calls:
   730 ;;		_lcd_set_bit
   731 ;; This function is called by:
   732 ;;		_lcd_string
   733 ;;		_test
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           	psect	text6
   738   000886                     __ptext6:
   739                           	callstack 0
   740   000886                     _lcd_char:
   741                           	callstack 28
   742                           
   743                           ;incstack = 0
   744                           ;lcd_char@data stored from wreg
   745   000886  6E08               	movwf	lcd_char@data^0,c
   746   000888                     
   747                           ;./lcd.h: 93: void lcd_char(char data);./lcd.h: 94: {;./lcd.h: 95:    char Lower_Nibble,
      +                          Upper_Nibble;;./lcd.h: 96:    Lower_Nibble = data&0x0F;
   748   000888  5008               	movf	lcd_char@data^0,w,c
   749   00088A  0B0F               	andlw	15
   750   00088C  6E02               	movwf	lcd_char@Lower_Nibble^0,c
   751                           
   752                           ;./lcd.h: 97:    Upper_Nibble = data&0xF0;
   753   00088E  5008               	movf	lcd_char@data^0,w,c
   754   000890  0BF0               	andlw	240
   755   000892  6E03               	movwf	lcd_char@Upper_Nibble^0,c
   756   000894                     
   757                           ;./lcd.h: 98:    LATDbits.LATD2 = 1;
   758   000894  848C               	bsf	140,2,c	;volatile
   759   000896                     
   760                           ;./lcd.h: 99:    lcd_set_bit(Upper_Nibble>>4);
   761   000896  3803               	swapf	lcd_char@Upper_Nibble^0,w,c
   762   000898  0B0F               	andlw	15
   763   00089A  EC1F  F005         	call	_lcd_set_bit
   764   00089E                     
   765                           ;./lcd.h: 100:    LATDbits.LATD3 = 1;
   766   00089E  868C               	bsf	140,3,c	;volatile
   767   0008A0                     
   768                           ;./lcd.h: 101:    for(int i=2130483; i<=0; i--) __nop();
   769   0008A0  0E82               	movlw	130
   770   0008A2  6E05               	movwf	(lcd_char@i+1)^0,c
   771   0008A4  0E33               	movlw	51
   772   0008A6  6E04               	movwf	lcd_char@i^0,c
   773   0008A8                     l47:
   774   0008A8  0000               	nop	
   775   0008AA  0604               	decf	lcd_char@i^0,f,c
   776   0008AC  A0D8               	btfss	status,0,c
   777   0008AE  0605               	decf	(lcd_char@i+1)^0,f,c
   778   0008B0  BE05               	btfsc	(lcd_char@i+1)^0,7,c
   779   0008B2  EF63  F004         	goto	u51
   780   0008B6  5005               	movf	(lcd_char@i+1)^0,w,c
   781   0008B8  E108               	bnz	u50
   782   0008BA  0404               	decf	lcd_char@i^0,w,c
   783   0008BC  A0D8               	btfss	status,0,c
   784   0008BE  EF63  F004         	goto	u51
   785   0008C2  EF65  F004         	goto	u50
   786   0008C6                     u51:
   787   0008C6  EF54  F004         	goto	l47
   788   0008CA                     u50:
   789   0008CA                     
   790                           ;./lcd.h: 102:    LATDbits.LATD3 = 0;
   791   0008CA  968C               	bcf	140,3,c	;volatile
   792   0008CC                     
   793                           ;./lcd.h: 103:    lcd_set_bit(Lower_Nibble);
   794   0008CC  5002               	movf	lcd_char@Lower_Nibble^0,w,c
   795   0008CE  EC1F  F005         	call	_lcd_set_bit
   796   0008D2                     
   797                           ;./lcd.h: 104:    LATDbits.LATD3 = 1;
   798   0008D2  868C               	bsf	140,3,c	;volatile
   799   0008D4                     
   800                           ;./lcd.h: 105:    for(int i=2130483; i<=0; i--) __nop();
   801   0008D4  0E82               	movlw	130
   802   0008D6  6E07               	movwf	(lcd_char@i_229+1)^0,c
   803   0008D8  0E33               	movlw	51
   804   0008DA  6E06               	movwf	lcd_char@i_229^0,c
   805   0008DC                     l49:
   806   0008DC  0000               	nop	
   807   0008DE  0606               	decf	lcd_char@i_229^0,f,c
   808   0008E0  A0D8               	btfss	status,0,c
   809   0008E2  0607               	decf	(lcd_char@i_229+1)^0,f,c
   810   0008E4  BE07               	btfsc	(lcd_char@i_229+1)^0,7,c
   811   0008E6  EF7D  F004         	goto	u61
   812   0008EA  5007               	movf	(lcd_char@i_229+1)^0,w,c
   813   0008EC  E108               	bnz	u60
   814   0008EE  0406               	decf	lcd_char@i_229^0,w,c
   815   0008F0  A0D8               	btfss	status,0,c
   816   0008F2  EF7D  F004         	goto	u61
   817   0008F6  EF7F  F004         	goto	u60
   818   0008FA                     u61:
   819   0008FA  EF6E  F004         	goto	l49
   820   0008FE                     u60:
   821   0008FE                     
   822                           ;./lcd.h: 106:    LATDbits.LATD3 = 0;
   823   0008FE  968C               	bcf	140,3,c	;volatile
   824   000900  0012               	return		;funcret
   825   000902                     __end_of_lcd_char:
   826                           	callstack 0
   827                           
   828 ;; *************** function _lcd_set_cursor *****************
   829 ;; Defined at:
   830 ;;		line 54 in file "./lcd.h"
   831 ;; Parameters:    Size  Location     Type
   832 ;;  a               1    wreg     unsigned char 
   833 ;;  b               1    3[COMRAM] unsigned char 
   834 ;; Auto vars:     Size  Location     Type
   835 ;;  a               1    4[COMRAM] unsigned char 
   836 ;;  temp            1    7[COMRAM] unsigned char 
   837 ;;  y               1    6[COMRAM] unsigned char 
   838 ;;  z               1    5[COMRAM] unsigned char 
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg, status,2, status,0, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   848 ;;      Params:         1       0       0       0       0       0       0       0       0
   849 ;;      Locals:         4       0       0       0       0       0       0       0       0
   850 ;;      Temps:          0       0       0       0       0       0       0       0       0
   851 ;;      Totals:         5       0       0       0       0       0       0       0       0
   852 ;;Total ram usage:        5 bytes
   853 ;; Hardware stack levels used: 1
   854 ;; Hardware stack levels required when called: 2
   855 ;; This function calls:
   856 ;;		_lcd_cmd
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text7
   863   000976                     __ptext7:
   864                           	callstack 0
   865   000976                     _lcd_set_cursor:
   866                           	callstack 28
   867                           
   868                           ;incstack = 0
   869                           ;lcd_set_cursor@a stored from wreg
   870   000976  6E05               	movwf	lcd_set_cursor@a^0,c
   871   000978                     
   872                           ;./lcd.h: 54: void lcd_set_cursor(char a, char b);./lcd.h: 55: {;./lcd.h: 56:     char t
      +                          emp,z,y;;./lcd.h: 57:     if(a== 1)
   873   000978  0405               	decf	lcd_set_cursor@a^0,w,c
   874   00097A  A4D8               	btfss	status,2,c
   875   00097C  EFC2  F004         	goto	u161
   876   000980  EFC4  F004         	goto	u160
   877   000984                     u161:
   878   000984  EFD5  F004         	goto	l955
   879   000988                     u160:
   880   000988                     
   881                           ;./lcd.h: 58:     {;./lcd.h: 59:       temp = 0x80 + b - 1;
   882   000988  5004               	movf	lcd_set_cursor@b^0,w,c
   883   00098A  0F7F               	addlw	127
   884   00098C  6E08               	movwf	lcd_set_cursor@temp^0,c
   885                           
   886                           ;./lcd.h: 60:         z = temp>>4;
   887   00098E  3808               	swapf	lcd_set_cursor@temp^0,w,c
   888   000990  0B0F               	andlw	15
   889   000992  6E06               	movwf	lcd_set_cursor@z^0,c
   890                           
   891                           ;./lcd.h: 61:         y = temp & 0x0F;
   892   000994  5008               	movf	lcd_set_cursor@temp^0,w,c
   893   000996  0B0F               	andlw	15
   894   000998  6E07               	movwf	lcd_set_cursor@y^0,c
   895   00099A                     
   896                           ;./lcd.h: 62:         lcd_cmd(z);
   897   00099A  5006               	movf	lcd_set_cursor@z^0,w,c
   898   00099C  EC95  F005         	call	_lcd_cmd
   899   0009A0                     
   900                           ;./lcd.h: 63:         lcd_cmd(y);
   901   0009A0  5007               	movf	lcd_set_cursor@y^0,w,c
   902   0009A2  EC95  F005         	call	_lcd_cmd
   903                           
   904                           ;./lcd.h: 64:     }
   905   0009A6  EFED  F004         	goto	l39
   906   0009AA                     l955:
   907   0009AA  0E02               	movlw	2
   908   0009AC  1805               	xorwf	lcd_set_cursor@a^0,w,c
   909   0009AE  A4D8               	btfss	status,2,c
   910   0009B0  EFDC  F004         	goto	u171
   911   0009B4  EFDE  F004         	goto	u170
   912   0009B8                     u171:
   913   0009B8  EFED  F004         	goto	l39
   914   0009BC                     u170:
   915   0009BC                     
   916                           ;./lcd.h: 66:     {;./lcd.h: 67:         temp = 0xC0 + b - 1;
   917   0009BC  5004               	movf	lcd_set_cursor@b^0,w,c
   918   0009BE  0FBF               	addlw	191
   919   0009C0  6E08               	movwf	lcd_set_cursor@temp^0,c
   920                           
   921                           ;./lcd.h: 68:         z = temp>>4;
   922   0009C2  3808               	swapf	lcd_set_cursor@temp^0,w,c
   923   0009C4  0B0F               	andlw	15
   924   0009C6  6E06               	movwf	lcd_set_cursor@z^0,c
   925                           
   926                           ;./lcd.h: 69:         y = temp & 0x0F;
   927   0009C8  5008               	movf	lcd_set_cursor@temp^0,w,c
   928   0009CA  0B0F               	andlw	15
   929   0009CC  6E07               	movwf	lcd_set_cursor@y^0,c
   930   0009CE                     
   931                           ;./lcd.h: 70:         lcd_cmd(z);
   932   0009CE  5006               	movf	lcd_set_cursor@z^0,w,c
   933   0009D0  EC95  F005         	call	_lcd_cmd
   934   0009D4                     
   935                           ;./lcd.h: 71:         lcd_cmd(y);
   936   0009D4  5007               	movf	lcd_set_cursor@y^0,w,c
   937   0009D6  EC95  F005         	call	_lcd_cmd
   938   0009DA                     l39:
   939   0009DA  0012               	return		;funcret
   940   0009DC                     __end_of_lcd_set_cursor:
   941                           	callstack 0
   942                           
   943 ;; *************** function _lcd_init *****************
   944 ;; Defined at:
   945 ;;		line 75 in file "./lcd.h"
   946 ;; Parameters:    Size  Location     Type
   947 ;;		None
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  i               2    0        int 
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg, status,2, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   959 ;;      Params:         0       0       0       0       0       0       0       0       0
   960 ;;      Locals:         0       0       0       0       0       0       0       0       0
   961 ;;      Temps:          1       0       0       0       0       0       0       0       0
   962 ;;      Totals:         1       0       0       0       0       0       0       0       0
   963 ;;Total ram usage:        1 bytes
   964 ;; Hardware stack levels used: 1
   965 ;; Hardware stack levels required when called: 2
   966 ;; This function calls:
   967 ;;		_lcd_cmd
   968 ;;		_lcd_set_bit
   969 ;; This function is called by:
   970 ;;		_main
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text8
   975   0009DC                     __ptext8:
   976                           	callstack 0
   977   0009DC                     _lcd_init:
   978                           	callstack 28
   979   0009DC                     
   980                           ;./lcd.h: 77:   lcd_set_bit(0x00);
   981   0009DC  0E00               	movlw	0
   982   0009DE  EC1F  F005         	call	_lcd_set_bit
   983   0009E2                     
   984                           ;./lcd.h: 79:   lcd_cmd(0x03);
   985   0009E2  0E03               	movlw	3
   986   0009E4  EC95  F005         	call	_lcd_cmd
   987   0009E8                     
   988                           ;./lcd.h: 80:   _delay((unsigned long)((5)*(8000000/4000.0)));
   989   0009E8  0E0D               	movlw	13
   990   0009EA  6E04               	movwf	??_lcd_init^0,c
   991   0009EC  0EFC               	movlw	252
   992   0009EE                     u267:
   993   0009EE  2EE8               	decfsz	wreg,f,c
   994   0009F0  D7FE               	bra	u267
   995   0009F2  2E04               	decfsz	??_lcd_init^0,f,c
   996   0009F4  D7FC               	bra	u267
   997   0009F6                     
   998                           ;./lcd.h: 81:   lcd_cmd(0x03);
   999   0009F6  0E03               	movlw	3
  1000   0009F8  EC95  F005         	call	_lcd_cmd
  1001                           
  1002                           ;./lcd.h: 82:   _delay((unsigned long)((11)*(8000000/4000.0)));
  1003   0009FC  0E1D               	movlw	29
  1004   0009FE  6E04               	movwf	??_lcd_init^0,c
  1005   000A00  0E91               	movlw	145
  1006   000A02                     u277:
  1007   000A02  2EE8               	decfsz	wreg,f,c
  1008   000A04  D7FE               	bra	u277
  1009   000A06  2E04               	decfsz	??_lcd_init^0,f,c
  1010   000A08  D7FC               	bra	u277
  1011   000A0A  0000               	nop	
  1012   000A0C                     
  1013                           ;./lcd.h: 83:   lcd_cmd(0x03);
  1014   000A0C  0E03               	movlw	3
  1015   000A0E  EC95  F005         	call	_lcd_cmd
  1016   000A12                     
  1017                           ;./lcd.h: 84:   lcd_cmd(0x02);
  1018   000A12  0E02               	movlw	2
  1019   000A14  EC95  F005         	call	_lcd_cmd
  1020   000A18                     
  1021                           ;./lcd.h: 85:   lcd_cmd(0x02);
  1022   000A18  0E02               	movlw	2
  1023   000A1A  EC95  F005         	call	_lcd_cmd
  1024   000A1E                     
  1025                           ;./lcd.h: 86:   lcd_cmd(0x08);
  1026   000A1E  0E08               	movlw	8
  1027   000A20  EC95  F005         	call	_lcd_cmd
  1028   000A24                     
  1029                           ;./lcd.h: 87:   lcd_cmd(0x00);
  1030   000A24  0E00               	movlw	0
  1031   000A26  EC95  F005         	call	_lcd_cmd
  1032   000A2A                     
  1033                           ;./lcd.h: 88:   lcd_cmd(0x0C);
  1034   000A2A  0E0C               	movlw	12
  1035   000A2C  EC95  F005         	call	_lcd_cmd
  1036   000A30                     
  1037                           ;./lcd.h: 89:   lcd_cmd(0x00);
  1038   000A30  0E00               	movlw	0
  1039   000A32  EC95  F005         	call	_lcd_cmd
  1040   000A36                     
  1041                           ;./lcd.h: 90:   lcd_cmd(0x06);
  1042   000A36  0E06               	movlw	6
  1043   000A38  EC95  F005         	call	_lcd_cmd
  1044   000A3C  0012               	return		;funcret
  1045   000A3E                     __end_of_lcd_init:
  1046                           	callstack 0
  1047                           
  1048 ;; *************** function _lcd_clear *****************
  1049 ;; Defined at:
  1050 ;;		line 48 in file "./lcd.h"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  2   32[None  ] int 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1064 ;;      Params:         0       0       0       0       0       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1067 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1068 ;;Total ram usage:        0 bytes
  1069 ;; Hardware stack levels used: 1
  1070 ;; Hardware stack levels required when called: 2
  1071 ;; This function calls:
  1072 ;;		_lcd_cmd
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text9
  1079   000B58                     __ptext9:
  1080                           	callstack 0
  1081   000B58                     _lcd_clear:
  1082                           	callstack 28
  1083   000B58                     
  1084                           ;./lcd.h: 50:     lcd_cmd(0);
  1085   000B58  0E00               	movlw	0
  1086   000B5A  EC95  F005         	call	_lcd_cmd
  1087                           
  1088                           ;./lcd.h: 51:     lcd_cmd(1);
  1089   000B5E  0E01               	movlw	1
  1090   000B60  EC95  F005         	call	_lcd_cmd
  1091   000B64  0012               	return		;funcret
  1092   000B66                     __end_of_lcd_clear:
  1093                           	callstack 0
  1094                           
  1095 ;; *************** function _lcd_cmd *****************
  1096 ;; Defined at:
  1097 ;;		line 39 in file "./lcd.h"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  a               1    wreg     unsigned char 
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;  a               1    2[COMRAM] unsigned char 
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      void 
  1104 ;; Registers used:
  1105 ;;		wreg, status,2, cstack
  1106 ;; Tracked objects:
  1107 ;;		On entry : 0/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1111 ;;      Params:         0       0       0       0       0       0       0       0       0
  1112 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1113 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1114 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1115 ;;Total ram usage:        2 bytes
  1116 ;; Hardware stack levels used: 1
  1117 ;; Hardware stack levels required when called: 1
  1118 ;; This function calls:
  1119 ;;		_lcd_set_bit
  1120 ;; This function is called by:
  1121 ;;		_lcd_clear
  1122 ;;		_lcd_set_cursor
  1123 ;;		_lcd_init
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           	psect	text10
  1128   000B2A                     __ptext10:
  1129                           	callstack 0
  1130   000B2A                     _lcd_cmd:
  1131                           	callstack 28
  1132                           
  1133                           ;incstack = 0
  1134                           ;lcd_cmd@a stored from wreg
  1135   000B2A  6E03               	movwf	lcd_cmd@a^0,c
  1136   000B2C                     
  1137                           ;./lcd.h: 39: void lcd_cmd(char a);./lcd.h: 40: {;./lcd.h: 41:     LATDbits.LATD2 = 0;
  1138   000B2C  948C               	bcf	140,2,c	;volatile
  1139   000B2E                     
  1140                           ;./lcd.h: 42:     lcd_set_bit(a);
  1141   000B2E  5003               	movf	lcd_cmd@a^0,w,c
  1142   000B30  EC1F  F005         	call	_lcd_set_bit
  1143   000B34                     
  1144                           ;./lcd.h: 43:     LATDbits.LATD3 = 1;
  1145   000B34  868C               	bsf	140,3,c	;volatile
  1146   000B36                     
  1147                           ;./lcd.h: 44:     _delay((unsigned long)((4)*(8000000/4000.0)));
  1148   000B36  0E0B               	movlw	11
  1149   000B38  6E02               	movwf	??_lcd_cmd^0,c
  1150   000B3A  0E62               	movlw	98
  1151   000B3C                     u287:
  1152   000B3C  2EE8               	decfsz	wreg,f,c
  1153   000B3E  D7FE               	bra	u287
  1154   000B40  2E02               	decfsz	??_lcd_cmd^0,f,c
  1155   000B42  D7FC               	bra	u287
  1156   000B44  D000               	nop2	
  1157   000B46                     
  1158                           ;./lcd.h: 45:     LATDbits.LATD3 = 0;
  1159   000B46  968C               	bcf	140,3,c	;volatile
  1160   000B48  0012               	return		;funcret
  1161   000B4A                     __end_of_lcd_cmd:
  1162                           	callstack 0
  1163                           
  1164 ;; *************** function _lcd_set_bit *****************
  1165 ;; Defined at:
  1166 ;;		line 16 in file "./lcd.h"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;  data_bit        1    wreg     unsigned char 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  data_bit        1    0[COMRAM] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1180 ;;      Params:         0       0       0       0       0       0       0       0       0
  1181 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1182 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1183 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1184 ;;Total ram usage:        1 bytes
  1185 ;; Hardware stack levels used: 1
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_lcd_cmd
  1190 ;;		_lcd_init
  1191 ;;		_lcd_char
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text11
  1196   000A3E                     __ptext11:
  1197                           	callstack 0
  1198   000A3E                     _lcd_set_bit:
  1199                           	callstack 28
  1200                           
  1201                           ;incstack = 0
  1202                           ;lcd_set_bit@data_bit stored from wreg
  1203   000A3E  6E01               	movwf	lcd_set_bit@data_bit^0,c
  1204   000A40                     
  1205                           ;./lcd.h: 16: void lcd_set_bit(char data_bit);./lcd.h: 17: {;./lcd.h: 18:     if(data_bi
      +                          t& 1)
  1206   000A40  A001               	btfss	lcd_set_bit@data_bit^0,0,c
  1207   000A42  EF25  F005         	goto	u11
  1208   000A46  EF27  F005         	goto	u10
  1209   000A4A                     u11:
  1210   000A4A  EF2A  F005         	goto	l19
  1211   000A4E                     u10:
  1212   000A4E                     
  1213                           ;./lcd.h: 19:         LATDbits.LATD4 = 1;
  1214   000A4E  888C               	bsf	140,4,c	;volatile
  1215   000A50  EF2B  F005         	goto	l765
  1216   000A54                     l19:
  1217                           
  1218                           ;./lcd.h: 21:         LATDbits.LATD4 = 0;
  1219   000A54  988C               	bcf	140,4,c	;volatile
  1220   000A56                     l765:
  1221                           
  1222                           ;./lcd.h: 23:     if(data_bit& 2)
  1223   000A56  A201               	btfss	lcd_set_bit@data_bit^0,1,c
  1224   000A58  EF30  F005         	goto	u21
  1225   000A5C  EF32  F005         	goto	u20
  1226   000A60                     u21:
  1227   000A60  EF35  F005         	goto	l21
  1228   000A64                     u20:
  1229   000A64                     
  1230                           ;./lcd.h: 24:         LATDbits.LATD5 = 1;
  1231   000A64  8A8C               	bsf	140,5,c	;volatile
  1232   000A66  EF36  F005         	goto	l769
  1233   000A6A                     l21:
  1234                           
  1235                           ;./lcd.h: 26:         LATDbits.LATD5 = 0;
  1236   000A6A  9A8C               	bcf	140,5,c	;volatile
  1237   000A6C                     l769:
  1238                           
  1239                           ;./lcd.h: 28:     if(data_bit& 4)
  1240   000A6C  A401               	btfss	lcd_set_bit@data_bit^0,2,c
  1241   000A6E  EF3B  F005         	goto	u31
  1242   000A72  EF3D  F005         	goto	u30
  1243   000A76                     u31:
  1244   000A76  EF40  F005         	goto	l23
  1245   000A7A                     u30:
  1246   000A7A                     
  1247                           ;./lcd.h: 29:         LATDbits.LATD6 = 1;
  1248   000A7A  8C8C               	bsf	140,6,c	;volatile
  1249   000A7C  EF41  F005         	goto	l773
  1250   000A80                     l23:
  1251                           
  1252                           ;./lcd.h: 31:         LATDbits.LATD6 = 0;
  1253   000A80  9C8C               	bcf	140,6,c	;volatile
  1254   000A82                     l773:
  1255                           
  1256                           ;./lcd.h: 33:     if(data_bit& 8)
  1257   000A82  A601               	btfss	lcd_set_bit@data_bit^0,3,c
  1258   000A84  EF46  F005         	goto	u41
  1259   000A88  EF48  F005         	goto	u40
  1260   000A8C                     u41:
  1261   000A8C  EF4B  F005         	goto	l25
  1262   000A90                     u40:
  1263   000A90                     
  1264                           ;./lcd.h: 34:         LATDbits.LATD7 = 1;
  1265   000A90  8E8C               	bsf	140,7,c	;volatile
  1266   000A92  EF4C  F005         	goto	l27
  1267   000A96                     l25:
  1268                           
  1269                           ;./lcd.h: 36:         LATDbits.LATD7 = 0;
  1270   000A96  9E8C               	bcf	140,7,c	;volatile
  1271   000A98                     l27:
  1272   000A98  0012               	return		;funcret
  1273   000A9A                     __end_of_lcd_set_bit:
  1274                           	callstack 0
  1275                           
  1276                           	psect	rparam
  1277   000000                     
  1278                           	psect	config
  1279                           
  1280                           ;Config register CONFIG2L @ 0x300002
  1281                           ;	unspecified, using default values
  1282                           ;	Power-up Timer Enable bit
  1283                           ;	PWRT = 0x1, unprogrammed default
  1284                           ;	Brown-out Reset Enable bits
  1285                           ;	BOR = 0x3, unprogrammed default
  1286                           ;	Brown-out Reset Voltage bits
  1287                           ;	BORV = 0x3, unprogrammed default
  1288                           ;	USB Voltage Regulator Enable bit
  1289                           ;	VREGEN = 0x0, unprogrammed default
  1290   300002                     	org	3145730
  1291   300002  1F                 	db	31
  1292                           
  1293                           ;Config register CONFIG2H @ 0x300003
  1294                           ;	Watchdog Timer Enable bit
  1295                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1296                           ;	Watchdog Timer Postscale Select bits
  1297                           ;	WDTPS = 0xF, unprogrammed default
  1298   300003                     	org	3145731
  1299   300003  1E                 	db	30
  1300                           tosu	equ	0xFFF
  1301                           tosh	equ	0xFFE
  1302                           tosl	equ	0xFFD
  1303                           stkptr	equ	0xFFC
  1304                           pclatu	equ	0xFFB
  1305                           pclath	equ	0xFFA
  1306                           pcl	equ	0xFF9
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           prodh	equ	0xFF4
  1312                           prodl	equ	0xFF3
  1313                           indf0	equ	0xFEF
  1314                           postinc0	equ	0xFEE
  1315                           postdec0	equ	0xFED
  1316                           preinc0	equ	0xFEC
  1317                           plusw0	equ	0xFEB
  1318                           fsr0h	equ	0xFEA
  1319                           fsr0l	equ	0xFE9
  1320                           wreg	equ	0xFE8
  1321                           indf1	equ	0xFE7
  1322                           postinc1	equ	0xFE6
  1323                           postdec1	equ	0xFE5
  1324                           preinc1	equ	0xFE4
  1325                           plusw1	equ	0xFE3
  1326                           fsr1h	equ	0xFE2
  1327                           fsr1l	equ	0xFE1
  1328                           bsr	equ	0xFE0
  1329                           indf2	equ	0xFDF
  1330                           postinc2	equ	0xFDE
  1331                           postdec2	equ	0xFDD
  1332                           preinc2	equ	0xFDC
  1333                           plusw2	equ	0xFDB
  1334                           fsr2h	equ	0xFDA
  1335                           fsr2l	equ	0xFD9
  1336                           status	equ	0xFD8

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_string@a	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_lcd_string
    _test->_lcd_char
    _lcd_string->_lcd_char
    _lcd_char->_lcd_set_bit
    _lcd_set_cursor->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_clear->_lcd_cmd
    _lcd_cmd->_lcd_set_bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1345
                                             12 COMRAM     2     2      0
                          _lcd_clear
                           _lcd_init
                     _lcd_set_cursor
                         _lcd_string
                               _test
                          _uart_init
                          _uart_read
                         _uart_write
 ---------------------------------------------------------------------------------
 (1) _uart_write                                           4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _uart_read                                            4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _test                                                 1     1      0     195
                                              8 COMRAM     1     1      0
                           _lcd_char
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           4     3      1     346
                                              8 COMRAM     4     3      1
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             7     7      0     180
                                              1 COMRAM     7     7      0
                        _lcd_set_bit
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       5     4      1     421
                                              3 COMRAM     5     4      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     165
                                              3 COMRAM     1     1      0
                            _lcd_cmd
                        _lcd_set_bit
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0      75
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                        _lcd_set_bit
 ---------------------------------------------------------------------------------
 (3) _lcd_set_bit                                          1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_clear
     _lcd_cmd
       _lcd_set_bit
   _lcd_init
     _lcd_cmd
     _lcd_set_bit
   _lcd_set_cursor
     _lcd_cmd
   _lcd_string
     _lcd_char
       _lcd_set_bit
   _test
     _lcd_char
   _uart_init
   _uart_read
   _uart_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      E       E       1       14.7%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBIGSFRhhh        6A      0       0      21        0.0%
BITBIGSFRhhl         1      0       0      22        0.0%
BITBIGSFRhl          6      0       0      23        0.0%
BITBIGSFRlh          1      0       0      24        0.0%
BITBIGSFRllh         8      0       0      25        0.0%
BITBIGSFRlll        21      0       0      26        0.0%
BIGRAM             7FF      0       0      27        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Sep 09 13:34:35 2024

           ?_lcd_set_bit 0001             lcd_char@data 0008            lcd_char@i_229 0006  
         uart_write@data 0003                       l21 0A6A                       l30 0B48  
                     l23 0A80                       l25 0A96                       l33 0B64  
                     l50 08FE                       l27 0A98                       l19 0A54  
                     l51 0900                       l44 0A3C                       l60 0B6E  
                     l39 09DA                       l47 08A8                       l63 0B76  
                     l71 080C                       l48 08CA                       l49 08DC  
                     l57 0B28                       l67 0962                       l68 0974  
                     l77 0884                       u10 0A4E                       u11 0A4A  
                     u20 0A64                       u21 0A60                       u30 0A7A  
                     u31 0A76                       u40 0A90                       u41 0A8C  
                     u50 08CA                       u51 08C6                       u60 08FE  
                     u61 08FA                      l801 08AA                      l803 08B0  
                    l805 08CC                      l901 0808                      l815 08DE  
                    l807 08D2                      l911 0826                      l903 081A  
                    l761 0A40                      l841 09E2                      l817 08E4  
                    l809 08D4                      l921 0872                      l913 0836  
                    l905 0822                      l771 0A7A                      l763 0A4E  
                    l819 0B58                      l851 09E8                      l923 0882  
                    l915 0844                      l773 0A82                      l765 0A56  
                    l781 0B34                      l861 0A1E                      l853 09F6  
                    l837 09DC                      l917 0860                      l775 0A90  
                    l767 0A64                      l783 0B36                      l863 0A24  
                    l855 0A0C                      l839 09E2                      l951 099A  
                    l791 0896                      l919 0862                      l769 0A6C  
                    l785 0B46                      l777 0B2C                      l865 0A2A  
                    l857 0A12                      l849 09E2                      l961 09D4  
                    l953 09A0                      l793 089E                      l881 0B70  
                    l779 0B2E                      l867 0A30                      l859 0A18  
                    l955 09AA                      l947 0978                      l795 08A0  
                    l787 0888                      l963 0AE8                      l883 0904  
                    l971 0A9A                      l869 0A36                      l957 09BC  
                    l949 0988                      l789 0894                      l965 0AF4  
                    l893 091A                      l885 0906                      l981 0ABC  
                    l973 0AA2                      l959 09CE                      l967 0B06  
                    l879 0B68                      l895 0940                      l887 0916  
                    l983 0AC0                      l975 0AA6                      l969 0B0A  
                    l897 0952                      l985 0AC6                      l977 0AB0  
                    l899 0964                      l987 0ACC                      l979 0AB4  
                    l989 0AD2                      u110 0962                      u111 095E  
                    u120 081A                      u104 092C                      u121 0816  
                    u105 0928                      u130 0844                      u131 0840  
                    u150 0872                      u151 086E                      u207 090C  
                    u160 0988                      u144 0856                      u161 0984  
                    u145 0852                      u217 0946                      u170 09BC  
                    u171 09B8                      u227 096A                      u180 0B28  
                    u181 0B24                      u237 081C                      u247 082C  
                    u257 0878                      u267 09EE                      u277 0A02  
                    u197 0AD8                      u287 0B3C                      wreg 0FE8  
        ?_lcd_set_cursor 0004                     STR_1 0801                     _LATD 0F8C  
                   _main 0A9A                     _test 0B66                     start 0000  
            lcd_string@a 0009              lcd_string@i 000B             ___param_bank 0000  
                  ?_main 0001                    ?_test 0001                    _TRISD 0F95  
        __end_of_lcd_cmd 0B4A                    main@x 000E                    tablat 0FF5  
                  test@s 0009                    status 0FD8          __initialization 0B4A  
           __end_of_main 0AE8             __end_of_test 0B70                   ??_main 000D  
                 ??_test 0009            __activetblptr 0001      lcd_set_bit@data_bit 0001  
       __end_of_lcd_char 0902         __end_of_lcd_init 0A3E                   isa$std 0001  
              ??_lcd_cmd 0002     lcd_char@Lower_Nibble 0002             __mediumconst 0000  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
             __accesstop 0060  __end_of__initialization 0B4A            ___rparam_used 0001  
         __pcstackCOMRAM 0001         ??_lcd_set_cursor 0005                ?_lcd_char 0001  
             _lcd_string 0AE8                ?_lcd_init 0001                  __Hparam 0000  
                __Lparam 0000        __end_of_lcd_clear 0B66             __psmallconst 0800  
                __pcinit 0B4A                  __ramtop 0800                  __ptext0 0A9A  
                __ptext1 0902                  __ptext2 0808                  __ptext3 0B70  
                __ptext4 0B66                  __ptext5 0AE8                  __ptext6 0886  
                __ptext7 0976                  __ptext8 09DC                  __ptext9 0B58  
                _lcd_cmd 0B2A               ??_lcd_char 0002               ??_lcd_init 0004  
   end_of_initialization 0B4A        __end_of_uart_init 0B78        __end_of_uart_read 0886  
   lcd_char@Upper_Nibble 0003               _uart_write 0902                _PORTBbits 0F81  
              _TRISBbits 0F93              uart_write@i 0004              ?_lcd_string 0009  
          ??_lcd_set_bit 0001      start_initialization 0B4A              ?_uart_write 0001  
    __end_of_lcd_set_bit 0A9A                _lcd_clear 0B58                 ?_lcd_cmd 0001  
            __smallconst 0800                 _LATBbits 0F8A                 _LATDbits 0F8C  
        lcd_set_cursor@a 0005          lcd_set_cursor@b 0004          lcd_set_cursor@y 0007  
        lcd_set_cursor@z 0006              _lcd_set_bit 0A3E                _uart_init 0B70  
              _uart_read 0808               uart_read@i 0004               ?_lcd_clear 0001  
              lcd_char@i 0004             ??_lcd_string 000A                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800               ?_uart_init 0001  
             ?_uart_read 0001       __end_of_lcd_string 0B2A       lcd_set_cursor@temp 0008  
               __ptext10 0B2A                 __ptext11 0A3E                 _lcd_char 0886  
               _lcd_init 09DC                 isa$xinst 0000                 lcd_cmd@a 0003  
            ??_lcd_clear 0004             ??_uart_write 0001           _lcd_set_cursor 0976  
     __end_of_uart_write 0976            uart_read@data 0003              ??_uart_init 0001  
            ??_uart_read 0001   __end_of_lcd_set_cursor 09DC  
