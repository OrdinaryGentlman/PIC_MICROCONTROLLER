

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Sep 04 08:38:58 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F458
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Generated 23/03/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F458 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     _LATD	set	3980
    58   000000                     _PORTCbits	set	3970
    59   000000                     _LATCbits	set	3979
    60   000000                     _LATDbits	set	3980
    61   000000                     _TRISCbits	set	3988
    62   000000                     _TRISD	set	3989
    63                           
    64                           	psect	smallconst
    65   000600                     __psmallconst:
    66                           	callstack 0
    67   000600  00                 	db	0
    68   000601                     STR_1:
    69   000601  4D                 	db	77	;'M'
    70   000602  41                 	db	65	;'A'
    71   000603  53                 	db	83	;'S'
    72   000604  54                 	db	84	;'T'
    73   000605  45                 	db	69	;'E'
    74   000606  52                 	db	82	;'R'
    75   000607  3A                 	db	58	;':'
    76   000608  20                 	db	32
    77   000609  00                 	db	0
    78   00060A  00                 	db	0	; dummy byte at the end
    79   000000                     
    80                           ; #config settings
    81                           
    82                           	psect	cinit
    83   00095C                     __pcinit:
    84                           	callstack 0
    85   00095C                     start_initialization:
    86                           	callstack 0
    87   00095C                     __initialization:
    88                           	callstack 0
    89                           
    90                           ; Clear objects allocated to COMRAM (3 bytes)
    91   00095C  6A11               	clrf	(__pbssCOMRAM+2)& (0+255),c
    92   00095E  6A10               	clrf	(__pbssCOMRAM+1)& (0+255),c
    93   000960  6A0F               	clrf	__pbssCOMRAM& (0+255),c
    94   000962                     end_of_initialization:
    95                           	callstack 0
    96   000962                     __end_of__initialization:
    97                           	callstack 0
    98   000962  0E00               	movlw	low (__Lsmallconst shr (0+16))
    99   000964  6EF8               	movwf	tblptru,c
   100   000966  0E06               	movlw	high __Lsmallconst
   101   000968  6EF7               	movwf	tblptrh,c
   102   00096A  0100               	movlb	0
   103   00096C  EF44  F004         	goto	_main	;jump to C main() function
   104                           
   105                           	psect	bssCOMRAM
   106   00000F                     __pbssCOMRAM:
   107                           	callstack 0
   108   00000F                     _payload:
   109                           	callstack 0
   110   00000F                     	ds	3
   111                           
   112                           	psect	cstackCOMRAM
   113   000001                     __pcstackCOMRAM:
   114                           	callstack 0
   115   000001                     ??_spi_transfer:
   116   000001                     lcd_set_bit@data_bit:
   117                           	callstack 0
   118                           
   119                           ; 1 bytes @ 0x0
   120   000001                     	ds	1
   121   000002                     ??_lcd_cmd:
   122   000002                     lcd_char@Lower_Nibble:
   123                           	callstack 0
   124   000002                     spi_transfer@data:
   125                           	callstack 0
   126                           
   127                           ; 1 bytes @ 0x1
   128   000002                     	ds	1
   129   000003                     lcd_cmd@a:
   130                           	callstack 0
   131   000003                     lcd_char@Upper_Nibble:
   132                           	callstack 0
   133   000003                     spi_transfer@receivedData:
   134                           	callstack 0
   135                           
   136                           ; 1 bytes @ 0x2
   137   000003                     	ds	1
   138   000004                     ??_lcd_init:
   139   000004                     lcd_set_cursor@b:
   140                           	callstack 0
   141   000004                     spi_transfer@i:
   142                           	callstack 0
   143   000004                     lcd_char@i:
   144                           	callstack 0
   145                           
   146                           ; 2 bytes @ 0x3
   147   000004                     	ds	1
   148   000005                     lcd_set_cursor@a:
   149                           	callstack 0
   150                           
   151                           ; 1 bytes @ 0x4
   152   000005                     	ds	1
   153   000006                     lcd_set_cursor@z:
   154                           	callstack 0
   155   000006                     lcd_char@i_259:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x5
   159   000006                     	ds	1
   160   000007                     lcd_set_cursor@y:
   161                           	callstack 0
   162                           
   163                           ; 1 bytes @ 0x6
   164   000007                     	ds	1
   165   000008                     lcd_set_cursor@temp:
   166                           	callstack 0
   167   000008                     lcd_char@data:
   168                           	callstack 0
   169                           
   170                           ; 1 bytes @ 0x7
   171   000008                     	ds	1
   172   000009                     lcd_string@a:
   173                           	callstack 0
   174                           
   175                           ; 1 bytes @ 0x8
   176   000009                     	ds	1
   177   00000A                     ??_lcd_string:
   178                           
   179                           ; 1 bytes @ 0x9
   180   00000A                     	ds	1
   181   00000B                     lcd_string@i:
   182                           	callstack 0
   183                           
   184                           ; 2 bytes @ 0xA
   185   00000B                     	ds	2
   186   00000D                     ??_main:
   187                           
   188                           ; 1 bytes @ 0xC
   189   00000D                     	ds	1
   190   00000E                     main@receivedData:
   191                           	callstack 0
   192                           
   193                           ; 1 bytes @ 0xD
   194   00000E                     	ds	1
   195                           
   196 ;;
   197 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   198 ;;
   199 ;; *************** function _main *****************
   200 ;; Defined at:
   201 ;;		line 15 in file "tx_main.c"
   202 ;; Parameters:    Size  Location     Type
   203 ;;		None
   204 ;; Auto vars:     Size  Location     Type
   205 ;;  receivedData    1   13[COMRAM] unsigned char 
   206 ;; Return value:  Size  Location     Type
   207 ;;                  1    wreg      void 
   208 ;; Registers used:
   209 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   210 ;; Tracked objects:
   211 ;;		On entry : 0/0
   212 ;;		On exit  : 0/0
   213 ;;		Unchanged: 0/0
   214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   215 ;;      Params:         0       0       0       0       0       0       0
   216 ;;      Locals:         1       0       0       0       0       0       0
   217 ;;      Temps:          1       0       0       0       0       0       0
   218 ;;      Totals:         2       0       0       0       0       0       0
   219 ;;Total ram usage:        2 bytes
   220 ;; Hardware stack levels required when called: 3
   221 ;; This function calls:
   222 ;;		_lcd_char
   223 ;;		_lcd_clear
   224 ;;		_lcd_init
   225 ;;		_lcd_set_cursor
   226 ;;		_lcd_string
   227 ;;		_spi_init
   228 ;;		_spi_transfer
   229 ;; This function is called by:
   230 ;;		Startup code after reset
   231 ;; This function uses a non-reentrant model
   232 ;;
   233                           
   234                           	psect	text0
   235   000888                     __ptext0:
   236                           	callstack 0
   237   000888                     _main:
   238                           	callstack 28
   239   000888  FFFF               	dw	65535	; assembler added errata NOP
   240                           
   241                           ;tx_main.c: 16:     TRISD = 0;
   242   00088A  0E00               	movlw	0
   243   00088C  6E95               	movwf	149,c	;volatile
   244                           
   245                           ;tx_main.c: 17:     LATD = 0;
   246   00088E  0E00               	movlw	0
   247   000890  6E8C               	movwf	140,c	;volatile
   248   000892                     
   249                           ;tx_main.c: 19:     lcd_init();
   250   000892  EC0E  F004         	call	_lcd_init	;wreg free
   251   000896                     
   252                           ;tx_main.c: 20:     lcd_set_cursor(1,1);
   253   000896  0E01               	movlw	1
   254   000898  6E04               	movwf	lcd_set_cursor@b^0,c
   255   00089A  0E01               	movlw	1
   256   00089C  ECD3  F003         	call	_lcd_set_cursor
   257   0008A0                     
   258                           ;tx_main.c: 21:     lcd_clear();
   259   0008A0  ECC1  F004         	call	_lcd_clear	;wreg free
   260   0008A4                     
   261                           ;tx_main.c: 22:     lcd_string("MASTER: ");
   262   0008A4  0E01               	movlw	low STR_1
   263   0008A6  6E09               	movwf	lcd_string@a^0,c
   264   0008A8  EC72  F004         	call	_lcd_string	;wreg free
   265   0008AC                     
   266                           ;tx_main.c: 24:     spi_init();
   267   0008AC  ECB8  F004         	call	_spi_init	;wreg free
   268   0008B0                     
   269                           ;tx_main.c: 26:     unsigned char receivedData;;tx_main.c: 28:     spi_init();
   270   0008B0  ECB8  F004         	call	_spi_init	;wreg free
   271   0008B4                     l969:
   272   0008B4  FFFF               	dw	65535	; assembler added errata NOP
   273                           
   274                           ;tx_main.c: 31:         spi_transfer('a');
   275   0008B6  0E61               	movlw	97
   276   0008B8  EC06  F003         	call	_spi_transfer
   277   0008BC                     
   278                           ;tx_main.c: 32:         receivedData = spi_transfer(2);
   279   0008BC  0E02               	movlw	2
   280   0008BE  EC06  F003         	call	_spi_transfer
   281   0008C2  6E0E               	movwf	main@receivedData^0,c
   282   0008C4                     
   283                           ;tx_main.c: 33:         lcd_char(receivedData);
   284   0008C4  500E               	movf	main@receivedData^0,w,c
   285   0008C6  EC4D  F003         	call	_lcd_char
   286   0008CA                     
   287                           ;tx_main.c: 34:         _delay((unsigned long)((10)*(8000000/4000.0)));
   288   0008CA  0E14               	movlw	20
   289   0008CC  6E0D               	movwf	??_main^0,c
   290   0008CE  0E7D               	movlw	125
   291   0008D0                     u177:
   292   0008D0  FFFF               	dw	65535	; errata NOP
   293   0008D2  2EE8               	decfsz	wreg,f,c
   294   0008D4  D7FD               	bra	u177
   295   0008D6  2E0D               	decfsz	??_main^0,f,c
   296   0008D8  D7FB               	bra	u177
   297   0008DA  D000               	nop2	
   298   0008DC  EF5A  F004         	goto	l969
   299   0008E0  EF01  F000         	goto	start
   300   0008E4                     __end_of_main:
   301                           	callstack 0
   302                           
   303 ;; *************** function _spi_transfer *****************
   304 ;; Defined at:
   305 ;;		line 28 in file "./soft_spi_master.h"
   306 ;; Parameters:    Size  Location     Type
   307 ;;  data            1    wreg     unsigned char 
   308 ;; Auto vars:     Size  Location     Type
   309 ;;  data            1    1[COMRAM] unsigned char 
   310 ;;  i               1    3[COMRAM] unsigned char 
   311 ;;  receivedData    1    2[COMRAM] unsigned char 
   312 ;; Return value:  Size  Location     Type
   313 ;;                  1    wreg      unsigned char 
   314 ;; Registers used:
   315 ;;		wreg, status,2, status,0
   316 ;; Tracked objects:
   317 ;;		On entry : 0/0
   318 ;;		On exit  : 0/0
   319 ;;		Unchanged: 0/0
   320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   321 ;;      Params:         0       0       0       0       0       0       0
   322 ;;      Locals:         3       0       0       0       0       0       0
   323 ;;      Temps:          1       0       0       0       0       0       0
   324 ;;      Totals:         4       0       0       0       0       0       0
   325 ;;Total ram usage:        4 bytes
   326 ;; Hardware stack levels used: 1
   327 ;; This function calls:
   328 ;;		Nothing
   329 ;; This function is called by:
   330 ;;		_main
   331 ;; This function uses a non-reentrant model
   332 ;;
   333                           
   334                           	psect	text1
   335   00060C                     __ptext1:
   336                           	callstack 0
   337   00060C                     _spi_transfer:
   338                           	callstack 0
   339   00060C  FFFF               	dw	65535	; assembler added errata NOP
   340                           
   341                           ;incstack = 0
   342                           ;spi_transfer@data stored from wreg
   343   00060E  6E02               	movwf	spi_transfer@data^0,c
   344   000610                     
   345                           ;./soft_spi_master.h: 29:     unsigned char receivedData = 0;
   346   000610  0E00               	movlw	0
   347   000612  6E03               	movwf	spi_transfer@receivedData^0,c
   348   000614                     
   349                           ;./soft_spi_master.h: 30:     LATCbits.LATC2 = 0;
   350   000614  948B               	bcf	139,2,c	;volatile
   351                           
   352                           ;./soft_spi_master.h: 31:     for (char i = 0; i < 8; i++) {
   353   000616  0E00               	movlw	0
   354   000618  6E04               	movwf	spi_transfer@i^0,c
   355   00061A                     l883:
   356   00061A  FFFF               	dw	65535	; assembler added errata NOP
   357                           
   358                           ;./soft_spi_master.h: 32:         LATCbits.LATC4 = (data & 0x80) ? 1 : 0;
   359   00061C  BE02               	btfsc	spi_transfer@data^0,7,c
   360   00061E  EF13  F003         	goto	u101
   361   000622  EF18  F003         	goto	u100
   362   000626                     u101:
   363   000626  FFFF               	dw	65535	; assembler added errata NOP
   364   000628  6A01               	clrf	??_spi_transfer^0,c
   365   00062A  2A01               	incf	??_spi_transfer^0,f,c
   366   00062C  EF1A  F003         	goto	u118
   367   000630                     u100:
   368   000630  FFFF               	dw	65535	; assembler added errata NOP
   369   000632  6A01               	clrf	??_spi_transfer^0,c
   370   000634                     u118:
   371   000634  FFFF               	dw	65535	; assembler added errata NOP
   372   000636  3A01               	swapf	??_spi_transfer^0,f,c
   373   000638  508B               	movf	139,w,c	;volatile
   374   00063A  1801               	xorwf	??_spi_transfer^0,w,c
   375   00063C  0BEF               	andlw	-17
   376   00063E  1801               	xorwf	??_spi_transfer^0,w,c
   377   000640  6E8B               	movwf	139,c	;volatile
   378                           
   379                           ;./soft_spi_master.h: 33:         data <<= 1;
   380   000642  90D8               	bcf	status,0,c
   381   000644  3602               	rlcf	spi_transfer@data^0,f,c
   382   000646                     
   383                           ;./soft_spi_master.h: 34:         _delay((unsigned long)((20)*(8000000/4000000.0)));
   384   000646  0E0A               	movlw	10
   385   000648                     u187:
   386   000648  FFFF               	dw	65535	; errata NOP
   387   00064A  2EE8               	decfsz	wreg,f,c
   388   00064C  D7FD               	bra	u187
   389   00064E                     
   390                           ;./soft_spi_master.h: 35:         LATCbits.LATC3 = 1;
   391   00064E  868B               	bsf	139,3,c	;volatile
   392   000650                     
   393                           ;./soft_spi_master.h: 36:         _delay((unsigned long)((20)*(8000000/4000000.0)));
   394   000650  0E0A               	movlw	10
   395   000652                     u197:
   396   000652  FFFF               	dw	65535	; errata NOP
   397   000654  2EE8               	decfsz	wreg,f,c
   398   000656  D7FD               	bra	u197
   399                           
   400                           ;./soft_spi_master.h: 37:         receivedData <<= 1;
   401   000658  90D8               	bcf	status,0,c
   402   00065A  3603               	rlcf	spi_transfer@receivedData^0,f,c
   403   00065C                     
   404                           ;./soft_spi_master.h: 38:         if (PORTCbits.RC5) receivedData |= 0x01;
   405   00065C  AA82               	btfss	130,5,c	;volatile
   406   00065E  EF33  F003         	goto	u121
   407   000662  EF36  F003         	goto	u120
   408   000666                     u121:
   409   000666  FFFF               	dw	65535	; assembler added errata NOP
   410   000668  EF38  F003         	goto	l895
   411   00066C                     u120:
   412   00066C  FFFF               	dw	65535	; assembler added errata NOP
   413   00066E  8003               	bsf	spi_transfer@receivedData^0,0,c
   414   000670                     l895:
   415   000670  FFFF               	dw	65535	; assembler added errata NOP
   416                           
   417                           ;./soft_spi_master.h: 39:         LATCbits.LATC3 = 0;
   418   000672  968B               	bcf	139,3,c	;volatile
   419   000674                     
   420                           ;./soft_spi_master.h: 40:         _delay((unsigned long)((20)*(8000000/4000000.0)));
   421   000674  0E0A               	movlw	10
   422   000676                     u207:
   423   000676  FFFF               	dw	65535	; errata NOP
   424   000678  2EE8               	decfsz	wreg,f,c
   425   00067A  D7FD               	bra	u207
   426   00067C                     
   427                           ;./soft_spi_master.h: 41:     }
   428   00067C  2A04               	incf	spi_transfer@i^0,f,c
   429   00067E  0E07               	movlw	7
   430   000680  6404               	cpfsgt	spi_transfer@i^0,c
   431   000682  EF45  F003         	goto	u131
   432   000686  EF48  F003         	goto	u130
   433   00068A                     u131:
   434   00068A  FFFF               	dw	65535	; assembler added errata NOP
   435   00068C  EF0D  F003         	goto	l883
   436   000690                     u130:
   437   000690  FFFF               	dw	65535	; assembler added errata NOP
   438   000692                     
   439                           ;./soft_spi_master.h: 43:     LATCbits.LATC2 = 1;
   440   000692  848B               	bsf	139,2,c	;volatile
   441   000694                     
   442                           ;./soft_spi_master.h: 44:     return receivedData;
   443   000694  5003               	movf	spi_transfer@receivedData^0,w,c
   444   000696  0012               	return		;funcret
   445   000698  FFFF               	dw	65535	; errata NOP
   446   00069A                     __end_of_spi_transfer:
   447                           	callstack 0
   448                           
   449 ;; *************** function _spi_init *****************
   450 ;; Defined at:
   451 ;;		line 18 in file "./soft_spi_master.h"
   452 ;; Parameters:    Size  Location     Type
   453 ;;		None
   454 ;; Auto vars:     Size  Location     Type
   455 ;;		None
   456 ;; Return value:  Size  Location     Type
   457 ;;                  1    wreg      void 
   458 ;; Registers used:
   459 ;;		None
   460 ;; Tracked objects:
   461 ;;		On entry : 0/0
   462 ;;		On exit  : 0/0
   463 ;;		Unchanged: 0/0
   464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   465 ;;      Params:         0       0       0       0       0       0       0
   466 ;;      Locals:         0       0       0       0       0       0       0
   467 ;;      Temps:          0       0       0       0       0       0       0
   468 ;;      Totals:         0       0       0       0       0       0       0
   469 ;;Total ram usage:        0 bytes
   470 ;; Hardware stack levels used: 1
   471 ;; This function calls:
   472 ;;		Nothing
   473 ;; This function is called by:
   474 ;;		_main
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478                           	psect	text2
   479   000970                     __ptext2:
   480                           	callstack 0
   481   000970                     _spi_init:
   482                           	callstack 0
   483   000970  FFFF               	dw	65535	; assembler added errata NOP
   484   000972                     
   485                           ;./soft_spi_master.h: 19:     TRISCbits.TRISC3 = 0;
   486   000972  9694               	bcf	148,3,c	;volatile
   487                           
   488                           ;./soft_spi_master.h: 20:     TRISCbits.TRISC4 = 0;
   489   000974  9894               	bcf	148,4,c	;volatile
   490                           
   491                           ;./soft_spi_master.h: 21:     TRISCbits.TRISC5 = 1;
   492   000976  8A94               	bsf	148,5,c	;volatile
   493                           
   494                           ;./soft_spi_master.h: 22:     TRISCbits.TRISC2 = 0;
   495   000978  9494               	bcf	148,2,c	;volatile
   496                           
   497                           ;./soft_spi_master.h: 24:     LATCbits.LATC2 = 1;
   498   00097A  848B               	bsf	139,2,c	;volatile
   499                           
   500                           ;./soft_spi_master.h: 25:     LATCbits.LATC3 = 0;
   501   00097C  968B               	bcf	139,3,c	;volatile
   502   00097E  0012               	return		;funcret
   503   000980  FFFF               	dw	65535	; errata NOP
   504   000982                     __end_of_spi_init:
   505                           	callstack 0
   506                           
   507 ;; *************** function _lcd_string *****************
   508 ;; Defined at:
   509 ;;		line 109 in file "./lcd.h"
   510 ;; Parameters:    Size  Location     Type
   511 ;;  a               1    8[COMRAM] PTR unsigned char 
   512 ;;		 -> STR_1(9), 
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  i               2   10[COMRAM] int 
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   524 ;;      Params:         1       0       0       0       0       0       0
   525 ;;      Locals:         2       0       0       0       0       0       0
   526 ;;      Temps:          1       0       0       0       0       0       0
   527 ;;      Totals:         4       0       0       0       0       0       0
   528 ;;Total ram usage:        4 bytes
   529 ;; Hardware stack levels used: 1
   530 ;; Hardware stack levels required when called: 2
   531 ;; This function calls:
   532 ;;		_lcd_char
   533 ;; This function is called by:
   534 ;;		_main
   535 ;; This function uses a non-reentrant model
   536 ;;
   537                           
   538                           	psect	text3
   539   0008E4                     __ptext3:
   540                           	callstack 0
   541   0008E4                     _lcd_string:
   542                           	callstack 0
   543   0008E4  FFFF               	dw	65535	; assembler added errata NOP
   544   0008E6                     
   545                           ;./lcd.h: 109: void lcd_string(char *a);./lcd.h: 110: {;./lcd.h: 111:     int i;;./lcd.h
      +                          : 112:     for(i=0;a[i]!='\0';i++)
   546   0008E6  0E00               	movlw	0
   547   0008E8  6E0C               	movwf	(lcd_string@i+1)^0,c
   548   0008EA  0E00               	movlw	0
   549   0008EC  6E0B               	movwf	lcd_string@i^0,c
   550   0008EE  EF86  F004         	goto	l953
   551   0008F2                     l949:
   552   0008F2  FFFF               	dw	65535	; assembler added errata NOP
   553                           
   554                           ;./lcd.h: 113:        lcd_char(a[i]);
   555   0008F4  5009               	movf	lcd_string@a^0,w,c
   556   0008F6  240B               	addwf	lcd_string@i^0,w,c
   557   0008F8  6E0A               	movwf	??_lcd_string^0,c
   558   0008FA  C00A  FFF6         	movff	??_lcd_string,tblptrl
   559   0008FE                     	if	0	;There is only one active tblptr byte
   560   0008FE                     	endif
   561   0008FE                     	if	0	;tblptru may be non-zero
   562   0008FE                     	endif
   563   0008FE                     	if	0	;tblptru may be non-zero
   564   0008FE                     	endif
   565   0008FE  0008               	tblrd		*
   566   000900  FFFF               	dw	65535	; errata NOP
   567   000902  50F5               	movf	tablat,w,c
   568   000904  EC4D  F003         	call	_lcd_char
   569   000908  4A0B               	infsnz	lcd_string@i^0,f,c
   570   00090A  2A0C               	incf	(lcd_string@i+1)^0,f,c
   571   00090C                     l953:
   572   00090C  FFFF               	dw	65535	; assembler added errata NOP
   573   00090E  5009               	movf	lcd_string@a^0,w,c
   574   000910  240B               	addwf	lcd_string@i^0,w,c
   575   000912  6E0A               	movwf	??_lcd_string^0,c
   576   000914  C00A  FFF6         	movff	??_lcd_string,tblptrl
   577   000918                     	if	0	;There is only one active tblptr byte
   578   000918                     	endif
   579   000918                     	if	0	;tblptru may be non-zero
   580   000918                     	endif
   581   000918                     	if	0	;tblptru may be non-zero
   582   000918                     	endif
   583   000918  0008               	tblrd		*
   584   00091A  FFFF               	dw	65535	; errata NOP
   585   00091C  50F5               	movf	tablat,w,c
   586   00091E  0900               	iorlw	0
   587   000920  A4D8               	btfss	status,2,c
   588   000922  EF95  F004         	goto	u161
   589   000926  EF98  F004         	goto	u160
   590   00092A                     u161:
   591   00092A  FFFF               	dw	65535	; assembler added errata NOP
   592   00092C  EF79  F004         	goto	l949
   593   000930                     u160:
   594   000930  FFFF               	dw	65535	; assembler added errata NOP
   595   000932  0012               	return		;funcret
   596   000934  FFFF               	dw	65535	; errata NOP
   597   000936                     __end_of_lcd_string:
   598                           	callstack 0
   599                           
   600 ;; *************** function _lcd_char *****************
   601 ;; Defined at:
   602 ;;		line 93 in file "./lcd.h"
   603 ;; Parameters:    Size  Location     Type
   604 ;;  data            1    wreg     unsigned char 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  data            1    7[COMRAM] unsigned char 
   607 ;;  i               2    5[COMRAM] int 
   608 ;;  i               2    3[COMRAM] int 
   609 ;;  Upper_Nibble    1    2[COMRAM] unsigned char 
   610 ;;  Lower_Nibble    1    1[COMRAM] unsigned char 
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, status,2, status,0, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   620 ;;      Params:         0       0       0       0       0       0       0
   621 ;;      Locals:         7       0       0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0       0       0
   623 ;;      Totals:         7       0       0       0       0       0       0
   624 ;;Total ram usage:        7 bytes
   625 ;; Hardware stack levels used: 1
   626 ;; Hardware stack levels required when called: 1
   627 ;; This function calls:
   628 ;;		_lcd_set_bit
   629 ;; This function is called by:
   630 ;;		_lcd_string
   631 ;;		_main
   632 ;;		_test
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text4
   637   00069A                     __ptext4:
   638                           	callstack 0
   639   00069A                     _lcd_char:
   640                           	callstack 0
   641   00069A  FFFF               	dw	65535	; assembler added errata NOP
   642                           
   643                           ;incstack = 0
   644                           ;lcd_char@data stored from wreg
   645   00069C  6E08               	movwf	lcd_char@data^0,c
   646   00069E                     
   647                           ;./lcd.h: 93: void lcd_char(char data);./lcd.h: 94: {;./lcd.h: 95:    char Lower_Nibble,
      +                          Upper_Nibble;;./lcd.h: 96:    Lower_Nibble = data&0x0F;
   648   00069E  5008               	movf	lcd_char@data^0,w,c
   649   0006A0  0B0F               	andlw	15
   650   0006A2  6E02               	movwf	lcd_char@Lower_Nibble^0,c
   651                           
   652                           ;./lcd.h: 97:    Upper_Nibble = data&0xF0;
   653   0006A4  5008               	movf	lcd_char@data^0,w,c
   654   0006A6  0BF0               	andlw	240
   655   0006A8  6E03               	movwf	lcd_char@Upper_Nibble^0,c
   656   0006AA                     
   657                           ;./lcd.h: 98:    LATDbits.LATD2 = 1;
   658   0006AA  848C               	bsf	140,2,c	;volatile
   659   0006AC                     
   660                           ;./lcd.h: 99:    lcd_set_bit(Upper_Nibble>>4);
   661   0006AC  3803               	swapf	lcd_char@Upper_Nibble^0,w,c
   662   0006AE  0B0F               	andlw	15
   663   0006B0  EC93  F003         	call	_lcd_set_bit
   664   0006B4                     
   665                           ;./lcd.h: 100:    LATDbits.LATD3 = 1;
   666   0006B4  868C               	bsf	140,3,c	;volatile
   667   0006B6                     
   668                           ;./lcd.h: 101:    for(int i=2130483; i<=0; i--) __nop();
   669   0006B6  0E82               	movlw	130
   670   0006B8  6E05               	movwf	(lcd_char@i+1)^0,c
   671   0006BA  0E33               	movlw	51
   672   0006BC  6E04               	movwf	lcd_char@i^0,c
   673   0006BE                     l47:
   674   0006BE  FFFF               	dw	65535	; assembler added errata NOP
   675   0006C0  0000               	nop	
   676   0006C2  0604               	decf	lcd_char@i^0,f,c
   677   0006C4  A0D8               	btfss	status,0,c
   678   0006C6  0605               	decf	(lcd_char@i+1)^0,f,c
   679   0006C8  BE05               	btfsc	(lcd_char@i+1)^0,7,c
   680   0006CA  EF6F  F003         	goto	u51
   681   0006CE  5005               	movf	(lcd_char@i+1)^0,w,c
   682   0006D0  E109               	bnz	u50
   683   0006D2  0404               	decf	lcd_char@i^0,w,c
   684   0006D4  A0D8               	btfss	status,0,c
   685   0006D6  EF6F  F003         	goto	u51
   686   0006DA  EF72  F003         	goto	u50
   687   0006DE                     u51:
   688   0006DE  FFFF               	dw	65535	; assembler added errata NOP
   689   0006E0  EF5F  F003         	goto	l47
   690   0006E4                     u50:
   691   0006E4  FFFF               	dw	65535	; assembler added errata NOP
   692   0006E6                     
   693                           ;./lcd.h: 102:    LATDbits.LATD3 = 0;
   694   0006E6  968C               	bcf	140,3,c	;volatile
   695   0006E8                     
   696                           ;./lcd.h: 103:    lcd_set_bit(Lower_Nibble);
   697   0006E8  5002               	movf	lcd_char@Lower_Nibble^0,w,c
   698   0006EA  EC93  F003         	call	_lcd_set_bit
   699   0006EE                     
   700                           ;./lcd.h: 104:    LATDbits.LATD3 = 1;
   701   0006EE  868C               	bsf	140,3,c	;volatile
   702   0006F0                     
   703                           ;./lcd.h: 105:    for(int i=2130483; i<=0; i--) __nop();
   704   0006F0  0E82               	movlw	130
   705   0006F2  6E07               	movwf	(lcd_char@i_259+1)^0,c
   706   0006F4  0E33               	movlw	51
   707   0006F6  6E06               	movwf	lcd_char@i_259^0,c
   708   0006F8                     l49:
   709   0006F8  FFFF               	dw	65535	; assembler added errata NOP
   710   0006FA  0000               	nop	
   711   0006FC  0606               	decf	lcd_char@i_259^0,f,c
   712   0006FE  A0D8               	btfss	status,0,c
   713   000700  0607               	decf	(lcd_char@i_259+1)^0,f,c
   714   000702  BE07               	btfsc	(lcd_char@i_259+1)^0,7,c
   715   000704  EF8C  F003         	goto	u61
   716   000708  5007               	movf	(lcd_char@i_259+1)^0,w,c
   717   00070A  E109               	bnz	u60
   718   00070C  0406               	decf	lcd_char@i_259^0,w,c
   719   00070E  A0D8               	btfss	status,0,c
   720   000710  EF8C  F003         	goto	u61
   721   000714  EF8F  F003         	goto	u60
   722   000718                     u61:
   723   000718  FFFF               	dw	65535	; assembler added errata NOP
   724   00071A  EF7C  F003         	goto	l49
   725   00071E                     u60:
   726   00071E  FFFF               	dw	65535	; assembler added errata NOP
   727   000720                     
   728                           ;./lcd.h: 106:    LATDbits.LATD3 = 0;
   729   000720  968C               	bcf	140,3,c	;volatile
   730   000722  0012               	return		;funcret
   731   000724  FFFF               	dw	65535	; errata NOP
   732   000726                     __end_of_lcd_char:
   733                           	callstack 0
   734                           
   735 ;; *************** function _lcd_set_cursor *****************
   736 ;; Defined at:
   737 ;;		line 54 in file "./lcd.h"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  a               1    wreg     unsigned char 
   740 ;;  b               1    3[COMRAM] unsigned char 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  a               1    4[COMRAM] unsigned char 
   743 ;;  temp            1    7[COMRAM] unsigned char 
   744 ;;  y               1    6[COMRAM] unsigned char 
   745 ;;  z               1    5[COMRAM] unsigned char 
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      void 
   748 ;; Registers used:
   749 ;;		wreg, status,2, status,0, cstack
   750 ;; Tracked objects:
   751 ;;		On entry : 0/0
   752 ;;		On exit  : 0/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   755 ;;      Params:         1       0       0       0       0       0       0
   756 ;;      Locals:         4       0       0       0       0       0       0
   757 ;;      Temps:          0       0       0       0       0       0       0
   758 ;;      Totals:         5       0       0       0       0       0       0
   759 ;;Total ram usage:        5 bytes
   760 ;; Hardware stack levels used: 1
   761 ;; Hardware stack levels required when called: 2
   762 ;; This function calls:
   763 ;;		_lcd_cmd
   764 ;; This function is called by:
   765 ;;		_main
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text5
   770   0007A6                     __ptext5:
   771                           	callstack 0
   772   0007A6                     _lcd_set_cursor:
   773                           	callstack 0
   774   0007A6  FFFF               	dw	65535	; assembler added errata NOP
   775                           
   776                           ;incstack = 0
   777                           ;lcd_set_cursor@a stored from wreg
   778   0007A8  6E05               	movwf	lcd_set_cursor@a^0,c
   779   0007AA                     
   780                           ;./lcd.h: 54: void lcd_set_cursor(char a, char b);./lcd.h: 55: {;./lcd.h: 56:     char t
      +                          emp,z,y;;./lcd.h: 57:     if(a== 1)
   781   0007AA  0405               	decf	lcd_set_cursor@a^0,w,c
   782   0007AC  A4D8               	btfss	status,2,c
   783   0007AE  EFDB  F003         	goto	u141
   784   0007B2  EFDE  F003         	goto	u140
   785   0007B6                     u141:
   786   0007B6  FFFF               	dw	65535	; assembler added errata NOP
   787   0007B8  EFF0  F003         	goto	l939
   788   0007BC                     u140:
   789   0007BC  FFFF               	dw	65535	; assembler added errata NOP
   790   0007BE                     
   791                           ;./lcd.h: 58:     {;./lcd.h: 59:       temp = 0x80 + b - 1;
   792   0007BE  5004               	movf	lcd_set_cursor@b^0,w,c
   793   0007C0  0F7F               	addlw	127
   794   0007C2  6E08               	movwf	lcd_set_cursor@temp^0,c
   795                           
   796                           ;./lcd.h: 60:         z = temp>>4;
   797   0007C4  3808               	swapf	lcd_set_cursor@temp^0,w,c
   798   0007C6  0B0F               	andlw	15
   799   0007C8  6E06               	movwf	lcd_set_cursor@z^0,c
   800                           
   801                           ;./lcd.h: 61:         y = temp & 0x0F;
   802   0007CA  5008               	movf	lcd_set_cursor@temp^0,w,c
   803   0007CC  0B0F               	andlw	15
   804   0007CE  6E07               	movwf	lcd_set_cursor@y^0,c
   805   0007D0                     
   806                           ;./lcd.h: 62:         lcd_cmd(z);
   807   0007D0  5006               	movf	lcd_set_cursor@z^0,w,c
   808   0007D2  EC9B  F004         	call	_lcd_cmd
   809   0007D6                     
   810                           ;./lcd.h: 63:         lcd_cmd(y);
   811   0007D6  5007               	movf	lcd_set_cursor@y^0,w,c
   812   0007D8  EC9B  F004         	call	_lcd_cmd
   813                           
   814                           ;./lcd.h: 64:     }
   815   0007DC  EF0B  F004         	goto	l39
   816   0007E0                     l939:
   817   0007E0  FFFF               	dw	65535	; assembler added errata NOP
   818   0007E2  0E02               	movlw	2
   819   0007E4  1805               	xorwf	lcd_set_cursor@a^0,w,c
   820   0007E6  A4D8               	btfss	status,2,c
   821   0007E8  EFF8  F003         	goto	u151
   822   0007EC  EFFB  F003         	goto	u150
   823   0007F0                     u151:
   824   0007F0  FFFF               	dw	65535	; assembler added errata NOP
   825   0007F2  EF0B  F004         	goto	l39
   826   0007F6                     u150:
   827   0007F6  FFFF               	dw	65535	; assembler added errata NOP
   828   0007F8                     
   829                           ;./lcd.h: 66:     {;./lcd.h: 67:         temp = 0xC0 + b - 1;
   830   0007F8  5004               	movf	lcd_set_cursor@b^0,w,c
   831   0007FA  0FBF               	addlw	191
   832   0007FC  6E08               	movwf	lcd_set_cursor@temp^0,c
   833                           
   834                           ;./lcd.h: 68:         z = temp>>4;
   835   0007FE  3808               	swapf	lcd_set_cursor@temp^0,w,c
   836   000800  0B0F               	andlw	15
   837   000802  6E06               	movwf	lcd_set_cursor@z^0,c
   838                           
   839                           ;./lcd.h: 69:         y = temp & 0x0F;
   840   000804  5008               	movf	lcd_set_cursor@temp^0,w,c
   841   000806  0B0F               	andlw	15
   842   000808  6E07               	movwf	lcd_set_cursor@y^0,c
   843   00080A                     
   844                           ;./lcd.h: 70:         lcd_cmd(z);
   845   00080A  5006               	movf	lcd_set_cursor@z^0,w,c
   846   00080C  EC9B  F004         	call	_lcd_cmd
   847   000810                     
   848                           ;./lcd.h: 71:         lcd_cmd(y);
   849   000810  5007               	movf	lcd_set_cursor@y^0,w,c
   850   000812  EC9B  F004         	call	_lcd_cmd
   851   000816                     l39:
   852   000816  FFFF               	dw	65535	; assembler added errata NOP
   853   000818  0012               	return		;funcret
   854   00081A  FFFF               	dw	65535	; errata NOP
   855   00081C                     __end_of_lcd_set_cursor:
   856                           	callstack 0
   857                           
   858 ;; *************** function _lcd_init *****************
   859 ;; Defined at:
   860 ;;		line 75 in file "./lcd.h"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  i               2    0        int 
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, status,2, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   874 ;;      Params:         0       0       0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0       0       0
   876 ;;      Temps:          1       0       0       0       0       0       0
   877 ;;      Totals:         1       0       0       0       0       0       0
   878 ;;Total ram usage:        1 bytes
   879 ;; Hardware stack levels used: 1
   880 ;; Hardware stack levels required when called: 2
   881 ;; This function calls:
   882 ;;		_lcd_cmd
   883 ;;		_lcd_set_bit
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text6
   890   00081C                     __ptext6:
   891                           	callstack 0
   892   00081C                     _lcd_init:
   893                           	callstack 0
   894   00081C  FFFF               	dw	65535	; assembler added errata NOP
   895   00081E                     
   896                           ;./lcd.h: 77:   lcd_set_bit(0x00);
   897   00081E  0E00               	movlw	0
   898   000820  EC93  F003         	call	_lcd_set_bit
   899   000824                     
   900                           ;./lcd.h: 79:   lcd_cmd(0x03);
   901   000824  0E03               	movlw	3
   902   000826  EC9B  F004         	call	_lcd_cmd
   903   00082A                     
   904                           ;./lcd.h: 80:   _delay((unsigned long)((5)*(8000000/4000.0)));
   905   00082A  0E0A               	movlw	10
   906   00082C  6E04               	movwf	??_lcd_init^0,c
   907   00082E  0EBE               	movlw	190
   908   000830                     u217:
   909   000830  FFFF               	dw	65535	; errata NOP
   910   000832  2EE8               	decfsz	wreg,f,c
   911   000834  D7FD               	bra	u217
   912   000836  2E04               	decfsz	??_lcd_init^0,f,c
   913   000838  D7FB               	bra	u217
   914   00083A  D000               	nop2	
   915   00083C                     
   916                           ;./lcd.h: 81:   lcd_cmd(0x03);
   917   00083C  0E03               	movlw	3
   918   00083E  EC9B  F004         	call	_lcd_cmd
   919                           
   920                           ;./lcd.h: 82:   _delay((unsigned long)((11)*(8000000/4000.0)));
   921   000842  0E16               	movlw	22
   922   000844  6E04               	movwf	??_lcd_init^0,c
   923   000846  0E70               	movlw	112
   924   000848                     u227:
   925   000848  FFFF               	dw	65535	; errata NOP
   926   00084A  2EE8               	decfsz	wreg,f,c
   927   00084C  D7FD               	bra	u227
   928   00084E  2E04               	decfsz	??_lcd_init^0,f,c
   929   000850  D7FB               	bra	u227
   930   000852  D000               	nop2	
   931   000854                     
   932                           ;./lcd.h: 83:   lcd_cmd(0x03);
   933   000854  0E03               	movlw	3
   934   000856  EC9B  F004         	call	_lcd_cmd
   935   00085A                     
   936                           ;./lcd.h: 84:   lcd_cmd(0x02);
   937   00085A  0E02               	movlw	2
   938   00085C  EC9B  F004         	call	_lcd_cmd
   939   000860                     
   940                           ;./lcd.h: 85:   lcd_cmd(0x02);
   941   000860  0E02               	movlw	2
   942   000862  EC9B  F004         	call	_lcd_cmd
   943   000866                     
   944                           ;./lcd.h: 86:   lcd_cmd(0x08);
   945   000866  0E08               	movlw	8
   946   000868  EC9B  F004         	call	_lcd_cmd
   947   00086C                     
   948                           ;./lcd.h: 87:   lcd_cmd(0x00);
   949   00086C  0E00               	movlw	0
   950   00086E  EC9B  F004         	call	_lcd_cmd
   951   000872                     
   952                           ;./lcd.h: 88:   lcd_cmd(0x0C);
   953   000872  0E0C               	movlw	12
   954   000874  EC9B  F004         	call	_lcd_cmd
   955   000878                     
   956                           ;./lcd.h: 89:   lcd_cmd(0x00);
   957   000878  0E00               	movlw	0
   958   00087A  EC9B  F004         	call	_lcd_cmd
   959   00087E                     
   960                           ;./lcd.h: 90:   lcd_cmd(0x06);
   961   00087E  0E06               	movlw	6
   962   000880  EC9B  F004         	call	_lcd_cmd
   963   000884  0012               	return		;funcret
   964   000886  FFFF               	dw	65535	; errata NOP
   965   000888                     __end_of_lcd_init:
   966                           	callstack 0
   967                           
   968 ;; *************** function _lcd_clear *****************
   969 ;; Defined at:
   970 ;;		line 48 in file "./lcd.h"
   971 ;; Parameters:    Size  Location     Type
   972 ;;		None
   973 ;; Auto vars:     Size  Location     Type
   974 ;;		None
   975 ;; Return value:  Size  Location     Type
   976 ;;                  2   32[None  ] int 
   977 ;; Registers used:
   978 ;;		wreg, status,2, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   984 ;;      Params:         0       0       0       0       0       0       0
   985 ;;      Locals:         0       0       0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0
   987 ;;      Totals:         0       0       0       0       0       0       0
   988 ;;Total ram usage:        0 bytes
   989 ;; Hardware stack levels used: 1
   990 ;; Hardware stack levels required when called: 2
   991 ;; This function calls:
   992 ;;		_lcd_cmd
   993 ;; This function is called by:
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text7
   999   000982                     __ptext7:
  1000                           	callstack 0
  1001   000982                     _lcd_clear:
  1002                           	callstack 0
  1003   000982  FFFF               	dw	65535	; assembler added errata NOP
  1004   000984                     
  1005                           ;./lcd.h: 50:     lcd_cmd(0);
  1006   000984  0E00               	movlw	0
  1007   000986  EC9B  F004         	call	_lcd_cmd
  1008                           
  1009                           ;./lcd.h: 51:     lcd_cmd(1);
  1010   00098A  0E01               	movlw	1
  1011   00098C  EC9B  F004         	call	_lcd_cmd
  1012   000990  0012               	return		;funcret
  1013   000992  FFFF               	dw	65535	; errata NOP
  1014   000994                     __end_of_lcd_clear:
  1015                           	callstack 0
  1016                           
  1017 ;; *************** function _lcd_cmd *****************
  1018 ;; Defined at:
  1019 ;;		line 39 in file "./lcd.h"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  a               1    wreg     unsigned char 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  a               1    2[COMRAM] unsigned char 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1033 ;;      Params:         0       0       0       0       0       0       0
  1034 ;;      Locals:         1       0       0       0       0       0       0
  1035 ;;      Temps:          1       0       0       0       0       0       0
  1036 ;;      Totals:         2       0       0       0       0       0       0
  1037 ;;Total ram usage:        2 bytes
  1038 ;; Hardware stack levels used: 1
  1039 ;; Hardware stack levels required when called: 1
  1040 ;; This function calls:
  1041 ;;		_lcd_set_bit
  1042 ;; This function is called by:
  1043 ;;		_lcd_clear
  1044 ;;		_lcd_set_cursor
  1045 ;;		_lcd_init
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           	psect	text8
  1050   000936                     __ptext8:
  1051                           	callstack 0
  1052   000936                     _lcd_cmd:
  1053                           	callstack 0
  1054   000936  FFFF               	dw	65535	; assembler added errata NOP
  1055                           
  1056                           ;incstack = 0
  1057                           ;lcd_cmd@a stored from wreg
  1058   000938  6E03               	movwf	lcd_cmd@a^0,c
  1059   00093A                     
  1060                           ;./lcd.h: 39: void lcd_cmd(char a);./lcd.h: 40: {;./lcd.h: 41:     LATDbits.LATD2 = 0;
  1061   00093A  948C               	bcf	140,2,c	;volatile
  1062   00093C                     
  1063                           ;./lcd.h: 42:     lcd_set_bit(a);
  1064   00093C  5003               	movf	lcd_cmd@a^0,w,c
  1065   00093E  EC93  F003         	call	_lcd_set_bit
  1066   000942                     
  1067                           ;./lcd.h: 43:     LATDbits.LATD3 = 1;
  1068   000942  868C               	bsf	140,3,c	;volatile
  1069   000944                     
  1070                           ;./lcd.h: 44:     _delay((unsigned long)((4)*(8000000/4000.0)));
  1071   000944  0E08               	movlw	8
  1072   000946  6E02               	movwf	??_lcd_cmd^0,c
  1073   000948  0ECB               	movlw	203
  1074   00094A                     u237:
  1075   00094A  FFFF               	dw	65535	; errata NOP
  1076   00094C  2EE8               	decfsz	wreg,f,c
  1077   00094E  D7FD               	bra	u237
  1078   000950  2E02               	decfsz	??_lcd_cmd^0,f,c
  1079   000952  D7FB               	bra	u237
  1080   000954  D000               	nop2	
  1081   000956                     
  1082                           ;./lcd.h: 45:     LATDbits.LATD3 = 0;
  1083   000956  968C               	bcf	140,3,c	;volatile
  1084   000958  0012               	return		;funcret
  1085   00095A  FFFF               	dw	65535	; errata NOP
  1086   00095C                     __end_of_lcd_cmd:
  1087                           	callstack 0
  1088                           
  1089 ;; *************** function _lcd_set_bit *****************
  1090 ;; Defined at:
  1091 ;;		line 16 in file "./lcd.h"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  data_bit        1    wreg     unsigned char 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  data_bit        1    0[COMRAM] unsigned char 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1105 ;;      Params:         0       0       0       0       0       0       0
  1106 ;;      Locals:         1       0       0       0       0       0       0
  1107 ;;      Temps:          0       0       0       0       0       0       0
  1108 ;;      Totals:         1       0       0       0       0       0       0
  1109 ;;Total ram usage:        1 bytes
  1110 ;; Hardware stack levels used: 1
  1111 ;; This function calls:
  1112 ;;		Nothing
  1113 ;; This function is called by:
  1114 ;;		_lcd_cmd
  1115 ;;		_lcd_init
  1116 ;;		_lcd_char
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text9
  1121   000726                     __ptext9:
  1122                           	callstack 0
  1123   000726                     _lcd_set_bit:
  1124                           	callstack 0
  1125   000726  FFFF               	dw	65535	; assembler added errata NOP
  1126                           
  1127                           ;incstack = 0
  1128                           ;lcd_set_bit@data_bit stored from wreg
  1129   000728  6E01               	movwf	lcd_set_bit@data_bit^0,c
  1130   00072A                     
  1131                           ;./lcd.h: 16: void lcd_set_bit(char data_bit);./lcd.h: 17: {;./lcd.h: 18:     if(data_bi
      +                          t& 1)
  1132   00072A  A001               	btfss	lcd_set_bit@data_bit^0,0,c
  1133   00072C  EF9A  F003         	goto	u11
  1134   000730  EF9D  F003         	goto	u10
  1135   000734                     u11:
  1136   000734  FFFF               	dw	65535	; assembler added errata NOP
  1137   000736  EFA1  F003         	goto	l19
  1138   00073A                     u10:
  1139   00073A  FFFF               	dw	65535	; assembler added errata NOP
  1140   00073C                     
  1141                           ;./lcd.h: 19:         LATDbits.LATD4 = 1;
  1142   00073C  888C               	bsf	140,4,c	;volatile
  1143   00073E  EFA3  F003         	goto	l759
  1144   000742                     l19:
  1145   000742  FFFF               	dw	65535	; assembler added errata NOP
  1146                           
  1147                           ;./lcd.h: 21:         LATDbits.LATD4 = 0;
  1148   000744  988C               	bcf	140,4,c	;volatile
  1149   000746                     l759:
  1150   000746  FFFF               	dw	65535	; assembler added errata NOP
  1151                           
  1152                           ;./lcd.h: 23:     if(data_bit& 2)
  1153   000748  A201               	btfss	lcd_set_bit@data_bit^0,1,c
  1154   00074A  EFA9  F003         	goto	u21
  1155   00074E  EFAC  F003         	goto	u20
  1156   000752                     u21:
  1157   000752  FFFF               	dw	65535	; assembler added errata NOP
  1158   000754  EFB0  F003         	goto	l21
  1159   000758                     u20:
  1160   000758  FFFF               	dw	65535	; assembler added errata NOP
  1161   00075A                     
  1162                           ;./lcd.h: 24:         LATDbits.LATD5 = 1;
  1163   00075A  8A8C               	bsf	140,5,c	;volatile
  1164   00075C  EFB2  F003         	goto	l763
  1165   000760                     l21:
  1166   000760  FFFF               	dw	65535	; assembler added errata NOP
  1167                           
  1168                           ;./lcd.h: 26:         LATDbits.LATD5 = 0;
  1169   000762  9A8C               	bcf	140,5,c	;volatile
  1170   000764                     l763:
  1171   000764  FFFF               	dw	65535	; assembler added errata NOP
  1172                           
  1173                           ;./lcd.h: 28:     if(data_bit& 4)
  1174   000766  A401               	btfss	lcd_set_bit@data_bit^0,2,c
  1175   000768  EFB8  F003         	goto	u31
  1176   00076C  EFBB  F003         	goto	u30
  1177   000770                     u31:
  1178   000770  FFFF               	dw	65535	; assembler added errata NOP
  1179   000772  EFBF  F003         	goto	l23
  1180   000776                     u30:
  1181   000776  FFFF               	dw	65535	; assembler added errata NOP
  1182   000778                     
  1183                           ;./lcd.h: 29:         LATDbits.LATD6 = 1;
  1184   000778  8C8C               	bsf	140,6,c	;volatile
  1185   00077A  EFC1  F003         	goto	l767
  1186   00077E                     l23:
  1187   00077E  FFFF               	dw	65535	; assembler added errata NOP
  1188                           
  1189                           ;./lcd.h: 31:         LATDbits.LATD6 = 0;
  1190   000780  9C8C               	bcf	140,6,c	;volatile
  1191   000782                     l767:
  1192   000782  FFFF               	dw	65535	; assembler added errata NOP
  1193                           
  1194                           ;./lcd.h: 33:     if(data_bit& 8)
  1195   000784  A601               	btfss	lcd_set_bit@data_bit^0,3,c
  1196   000786  EFC7  F003         	goto	u41
  1197   00078A  EFCA  F003         	goto	u40
  1198   00078E                     u41:
  1199   00078E  FFFF               	dw	65535	; assembler added errata NOP
  1200   000790  EFCE  F003         	goto	l25
  1201   000794                     u40:
  1202   000794  FFFF               	dw	65535	; assembler added errata NOP
  1203   000796                     
  1204                           ;./lcd.h: 34:         LATDbits.LATD7 = 1;
  1205   000796  8E8C               	bsf	140,7,c	;volatile
  1206   000798  EFD0  F003         	goto	l27
  1207   00079C                     l25:
  1208   00079C  FFFF               	dw	65535	; assembler added errata NOP
  1209                           
  1210                           ;./lcd.h: 36:         LATDbits.LATD7 = 0;
  1211   00079E  9E8C               	bcf	140,7,c	;volatile
  1212   0007A0                     l27:
  1213   0007A0  FFFF               	dw	65535	; assembler added errata NOP
  1214   0007A2  0012               	return		;funcret
  1215   0007A4  FFFF               	dw	65535	; errata NOP
  1216   0007A6                     __end_of_lcd_set_bit:
  1217                           	callstack 0
  1218                           
  1219                           	psect	rparam
  1220   000000                     
  1221                           	psect	config
  1222                           
  1223                           ;Config register CONFIG2L @ 0x300002
  1224                           ;	unspecified, using default values
  1225                           ;	Power-up Timer Enable bit
  1226                           ;	PWRT = 0x1, unprogrammed default
  1227                           ;	Brown-out Reset Enable bit
  1228                           ;	BOR = 0x1, unprogrammed default
  1229                           ;	Brown-out Reset Voltage bits
  1230                           ;	BORV = 0x3, unprogrammed default
  1231   300002                     	org	3145730
  1232   300002  0F                 	db	15
  1233                           
  1234                           ;Config register CONFIG2H @ 0x300003
  1235                           ;	Watchdog Timer Enable bit
  1236                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1237                           ;	Watchdog Timer Postscale Select bits
  1238                           ;	WDTPS = 0x7, unprogrammed default
  1239   300003                     	org	3145731
  1240   300003  0E                 	db	14
  1241                           tosu	equ	0xFFF
  1242                           tosh	equ	0xFFE
  1243                           tosl	equ	0xFFD
  1244                           stkptr	equ	0xFFC
  1245                           pclatu	equ	0xFFB
  1246                           pclath	equ	0xFFA
  1247                           pcl	equ	0xFF9
  1248                           tblptru	equ	0xFF8
  1249                           tblptrh	equ	0xFF7
  1250                           tblptrl	equ	0xFF6
  1251                           tablat	equ	0xFF5
  1252                           prodh	equ	0xFF4
  1253                           prodl	equ	0xFF3
  1254                           indf0	equ	0xFEF
  1255                           postinc0	equ	0xFEE
  1256                           postdec0	equ	0xFED
  1257                           preinc0	equ	0xFEC
  1258                           plusw0	equ	0xFEB
  1259                           fsr0h	equ	0xFEA
  1260                           fsr0l	equ	0xFE9
  1261                           wreg	equ	0xFE8
  1262                           indf1	equ	0xFE7
  1263                           postinc1	equ	0xFE6
  1264                           postdec1	equ	0xFE5
  1265                           preinc1	equ	0xFE4
  1266                           plusw1	equ	0xFE3
  1267                           fsr1h	equ	0xFE2
  1268                           fsr1l	equ	0xFE1
  1269                           bsr	equ	0xFE0
  1270                           indf2	equ	0xFDF
  1271                           postinc2	equ	0xFDE
  1272                           postdec2	equ	0xFDD
  1273                           preinc2	equ	0xFDC
  1274                           plusw2	equ	0xFDB
  1275                           fsr2h	equ	0xFDA
  1276                           fsr2l	equ	0xFD9
  1277                           status	equ	0xFD8

Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcd_string@a	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_lcd_string
    _lcd_string->_lcd_char
    _lcd_char->_lcd_set_bit
    _lcd_set_cursor->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_clear->_lcd_cmd
    _lcd_cmd->_lcd_set_bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1270
                                             12 COMRAM     2     2      0
                           _lcd_char
                          _lcd_clear
                           _lcd_init
                     _lcd_set_cursor
                         _lcd_string
                           _spi_init
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _spi_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           4     3      1     346
                                              8 COMRAM     4     3      1
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             7     7      0     180
                                              1 COMRAM     7     7      0
                        _lcd_set_bit
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       5     4      1     421
                                              3 COMRAM     5     4      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     165
                                              3 COMRAM     1     1      0
                            _lcd_cmd
                        _lcd_set_bit
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0      75
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                        _lcd_set_bit
 ---------------------------------------------------------------------------------
 (3) _lcd_set_bit                                          1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_char
     _lcd_set_bit
   _lcd_clear
     _lcd_cmd
       _lcd_set_bit
   _lcd_init
     _lcd_cmd
     _lcd_set_bit
   _lcd_set_cursor
     _lcd_cmd
   _lcd_string
     _lcd_char
   _spi_init
   _spi_transfer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRll         82      0       0      19        0.0%
BITBIGSFRhh         6A      0       0      16        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      11       1       17.9%
BITBIGSFRlh          8      0       0      18        0.0%
BITBIGSFRhl          7      0       0      17        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      11      20        0.0%
DATA                 0      0      11       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Sep 04 08:38:58 2024

                                                 ?_lcd_set_bit 0001  
                                                 lcd_char@data 0008  
                                                lcd_char@i_259 0006  
                                                           l21 0760  
                                                           l30 0958  
                                                           l23 077E  
                                                           l25 079C  
                                                           l33 0990  
                                                           l50 0720  
                                                           l27 07A0  
                                                           l19 0742  
                                                           l51 0722  
                                                           l44 0884  
                                                           l39 0816  
                                                           l47 06BE  
                                                           l63 097E  
                                                           l48 06E6  
                                                           l49 06F8  
                                                           l57 0932  
                                                           l67 0692  
                                                           l69 0696  
                                                           u10 073A  
                                                           u11 0734  
                                                           u20 0758  
                                                           u21 0752  
                                                           u30 0776  
                                                           u31 0770  
                                                           u40 0794  
                                                           u41 078E  
                                                           u50 06E4  
                                                           u51 06DE  
                                                           u60 071E  
                                                           u61 0718  
                                                          l801 06EE  
                                                          l811 0702  
                                                          l803 06F0  
                                                          l813 0984  
                                                          l901 067E  
                                                          l831 081E  
                                                          l903 0694  
                                                          l761 075A  
                                                          l833 0824  
                                                          l809 06FC  
                                                          l763 0764  
                                                          l755 072A  
                                                          l771 093A  
                                                          l851 085A  
                                                          l843 0824  
                                                          l835 0824  
                                                          l931 07AA  
                                                          l765 0778  
                                                          l757 073C  
                                                          l773 093C  
                                                          l861 0878  
                                                          l853 0860  
                                                          l845 082A  
                                                          l941 07F8  
                                                          l933 07BE  
                                                          l781 069E  
                                                          l767 0782  
                                                          l759 0746  
                                                          l775 0942  
                                                          l863 087E  
                                                          l855 0866  
                                                          l847 083C  
                                                          l943 080A  
                                                          l935 07D0  
                                                          l783 06AA  
                                                          l951 0908  
                                                          l769 0796  
                                                          l777 0944  
                                                          l857 086C  
                                                          l849 0854  
                                                          l945 0810  
                                                          l937 07D6  
                                                          l785 06AC  
                                                          l953 090C  
                                                          l873 0972  
                                                          l961 08A0  
                                                          l779 0956  
                                                          l859 0872  
                                                          l939 07E0  
                                                          l795 06C2  
                                                          l787 06B4  
                                                          l947 08E6  
                                                          l891 065C  
                                                          l883 061A  
                                                          l875 0610  
                                                          l971 08BC  
                                                          l963 08A4  
                                                          l955 0888  
                                                          l797 06C8  
                                                          l789 06B6  
                                                          l949 08F2  
                                                          l893 066E  
                                                          l885 0646  
                                                          l877 0614  
                                                          l973 08C4  
                                                          l965 08AC  
                                                          l957 0892  
                                                          l799 06E8  
                                                          l895 0670  
                                                          l887 064E  
                                                          l975 08CA  
                                                          l967 08B0  
                                                          l959 0896  
                                                          l897 0674  
                                                          l889 0650  
                                                          l969 08B4  
                                                          l899 067C  
                                                          u100 0630  
                                                          u101 0626  
                                                          u120 066C  
                                                          u121 0666  
                                                          u130 0690  
                                                          u131 068A  
                                                          u140 07BC  
                                                          u141 07B6  
                                                          u150 07F6  
                                                          u118 0634  
                                                          u151 07F0  
                                                          u207 0676  
                                                          u160 0930  
                                                          u217 0830  
                                                          u161 092A  
                                                          u227 0848  
                                                          u237 094A  
                                                          u177 08D0  
                                                          u187 0648  
                                                          u197 0652  
                                                          wreg 0FE8  
                                              ?_lcd_set_cursor 0004  
                                                         STR_1 0601  
                                                         _LATD 0F8C  
                                                         _main 0888  
                                                         start 0002  
                                                  lcd_string@a 0009  
                                                  lcd_string@i 000B  
                                                 ___param_bank 0000  
                                                        ?_main 0001  
                                                        _TRISD 0F95  
                                              __end_of_lcd_cmd 095C  
                                                        tablat 0FF5  
                                                        status 0FD8  
                                              __initialization 095C  
                                                 __end_of_main 08E4  
                                                       ??_main 000D  
                                                __activetblptr 0001  
                                          lcd_set_bit@data_bit 0001  
                                             __end_of_lcd_char 0726  
                                             __end_of_lcd_init 0888  
                                                       isa$std 0001  
                                                spi_transfer@i 0004  
                                                    ??_lcd_cmd 0002  
                                         lcd_char@Lower_Nibble 0002  
                                                 __mediumconst 0000  
                                                       tblptrh 0FF7  
                                                       tblptrl 0FF6  
                                                       tblptru 0FF8  
                                             __end_of_spi_init 0982  
                                                   __accesstop 0060  
                                      __end_of__initialization 0962  
                                                ___rparam_used 0001  
                                               __pcstackCOMRAM 0001  
                                             ??_lcd_set_cursor 0005  
                                                    ?_lcd_char 0001  
                                                   _lcd_string 08E4  
                                                    ?_lcd_init 0001  
                                                      __Hparam 0000  
                                                      __Lparam 0000  
                                            __end_of_lcd_clear 0994  
                                                    ?_spi_init 0001  
                                                 __psmallconst 0600  
                                                      __pcinit 095C  
                                                      __ramtop 0600  
                                                      __ptext0 0888  
                                                      __ptext1 060C  
                                                      __ptext2 0970  
                                                      __ptext3 08E4  
                                                      __ptext4 069A  
                                                      __ptext5 07A6  
                                                      __ptext6 081C  
                                                      __ptext7 0982  
                                                      __ptext8 0936  
                                                      __ptext9 0726  
                                                      _lcd_cmd 0936  
                                                      _payload 000F  
                                                   ??_lcd_char 0002  
                                                   ??_lcd_init 0004  
                                         end_of_initialization 0962  
                                                   ??_spi_init 0001  
                                         lcd_char@Upper_Nibble 0003  
                                                    _PORTCbits 0F82  
                                                    _TRISCbits 0F94  
                                                  ?_lcd_string 0009  
                                                ?_spi_transfer 0001  
                                                ??_lcd_set_bit 0001  
                                          start_initialization 095C  
                                             main@receivedData 000E  
                                               ??_spi_transfer 0001  
                                          __end_of_lcd_set_bit 07A6  
                                                  __pbssCOMRAM 000F  
                                                    _lcd_clear 0982  
                                                     ?_lcd_cmd 0001  
                                                  __smallconst 0600  
                                     spi_transfer@receivedData 0003  
                                                     _LATCbits 0F8B  
                                                     _LATDbits 0F8C  
                                              lcd_set_cursor@a 0005  
                                              lcd_set_cursor@b 0004  
                                              lcd_set_cursor@y 0007  
                                              lcd_set_cursor@z 0006  
                                                  _lcd_set_bit 0726  
                                                   ?_lcd_clear 0001  
                                                    lcd_char@i 0004  
                                         __end_of_spi_transfer 069A  
                                             spi_transfer@data 0002  
                                                 ??_lcd_string 000A  
                                                     __Hrparam 0000  
                                                     __Lrparam 0000  
                                                 __Lsmallconst 0600  
                                           __end_of_lcd_string 0936  
                                           lcd_set_cursor@temp 0008  
                                                     _lcd_char 069A  
                                                     _lcd_init 081C  
                                                     isa$xinst 0000  
                                                     _spi_init 0970  
                                                     lcd_cmd@a 0003  
                                                  ??_lcd_clear 0004  
                                               _lcd_set_cursor 07A6  
                                       __end_of_lcd_set_cursor 081C  
                                                 _spi_transfer 060C  
